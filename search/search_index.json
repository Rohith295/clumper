{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Clumper \u00b6 A small library that can clump sequences of data together. Part of a video series on calmcode.io . Base Example \u00b6 Clumper allows you to quickly parse through a list of data. Here's an example of a list of dictionaries. pokemon = [ {'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'hp': 45, 'attack': 49} {'name': 'Charmander', 'type': ['Fire'], 'hp': 39, 'attack': 52}, ... ] Download this dataset. You can fetch the dataset by from the commandline. wget https://calmcode.io/datasets/pokemon.json You can fetch the dataset by from python. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib.request.urlopen(url) as f: pokemon = json.loads(f.read()) You can also download it manually here . Given this list of dictionaries we can write the following query; from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) What this code does line-by-line. This code will perform the following steps. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper . It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. The dictionaries that are left will also have a property called ratio which calculates the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries. This is what we get back: [{ 'name' : 'Diglett' , 'type' : 'Ground' , 'ratio' : 5.5 }, { 'name' : 'DeoxysAttack Forme' , 'type' : 'Psychic' , 'ratio' : 3.6 }, { 'name' : 'Krabby' , 'type' : 'Water' , 'ratio' : 3.5 }, { 'name' : 'DeoxysNormal Forme' , 'type' : 'Psychic' , 'ratio' : 3.0 }, { 'name' : 'BanetteMega Banette' , 'type' : 'Ghost' , 'ratio' : 2.578125 }] Features \u00b6 This library has no dependencies besides a modern version of python. The library offers a pattern of verbs that are very expressive. You can write code from top to bottom, left to right. MIT License Installation \u00b6 You can install this package via pip . pip install clumper It may be safer however to install via; python -m pip install clumper For details on why, check out this resource . Contributing \u00b6 Make sure you check out the issue list beforehand. New features should be discussed first and we also want to prevent that two people are working on the same thing. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:koaning/clumper.git cd clumper make install-dev","title":"Index"},{"location":"index.html#clumper","text":"A small library that can clump sequences of data together. Part of a video series on calmcode.io .","title":"Clumper"},{"location":"index.html#base-example","text":"Clumper allows you to quickly parse through a list of data. Here's an example of a list of dictionaries. pokemon = [ {'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'hp': 45, 'attack': 49} {'name': 'Charmander', 'type': ['Fire'], 'hp': 39, 'attack': 52}, ... ] Download this dataset. You can fetch the dataset by from the commandline. wget https://calmcode.io/datasets/pokemon.json You can fetch the dataset by from python. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib.request.urlopen(url) as f: pokemon = json.loads(f.read()) You can also download it manually here . Given this list of dictionaries we can write the following query; from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) What this code does line-by-line. This code will perform the following steps. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper . It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. The dictionaries that are left will also have a property called ratio which calculates the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries. This is what we get back: [{ 'name' : 'Diglett' , 'type' : 'Ground' , 'ratio' : 5.5 }, { 'name' : 'DeoxysAttack Forme' , 'type' : 'Psychic' , 'ratio' : 3.6 }, { 'name' : 'Krabby' , 'type' : 'Water' , 'ratio' : 3.5 }, { 'name' : 'DeoxysNormal Forme' , 'type' : 'Psychic' , 'ratio' : 3.0 }, { 'name' : 'BanetteMega Banette' , 'type' : 'Ghost' , 'ratio' : 2.578125 }]","title":"Base Example"},{"location":"index.html#features","text":"This library has no dependencies besides a modern version of python. The library offers a pattern of verbs that are very expressive. You can write code from top to bottom, left to right. MIT License","title":"Features"},{"location":"index.html#installation","text":"You can install this package via pip . pip install clumper It may be safer however to install via; python -m pip install clumper For details on why, check out this resource .","title":"Installation"},{"location":"index.html#contributing","text":"Make sure you check out the issue list beforehand. New features should be discussed first and we also want to prevent that two people are working on the same thing. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:koaning/clumper.git cd clumper make install-dev","title":"Contributing"},{"location":"faq.html","text":"Why the name? \u00b6 Sometimes you just want something to \"clump\" together in the right way. So we turned the word \"clump\" into a verb and into a python package. How did it get started? \u00b6 The origin of this package was educational. It got started as free educational content on calmcode.io . When should I use it? \u00b6 If you enjoy the functional style of programming and you have a small enough dataset that you want to analyse quickly, this lightweight package might help. When should I not? \u00b6 The package works and has proper testing but it is not meant for very large datasets.","title":"FAQ"},{"location":"faq.html#why-the-name","text":"Sometimes you just want something to \"clump\" together in the right way. So we turned the word \"clump\" into a verb and into a python package.","title":"Why the name?"},{"location":"faq.html#how-did-it-get-started","text":"The origin of this package was educational. It got started as free educational content on calmcode.io .","title":"How did it get started?"},{"location":"faq.html#when-should-i-use-it","text":"If you enjoy the functional style of programming and you have a small enough dataset that you want to analyse quickly, this lightweight package might help.","title":"When should I use it?"},{"location":"faq.html#when-should-i-not","text":"The package works and has proper testing but it is not meant for very large datasets.","title":"When should I not?"},{"location":"api/clumper.html","text":"Clumper \u00b6 This object adds methods to a list of dictionaries that make it nicer to explore. Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts ) agg ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @grouped def agg ( self , ** kwargs ): \"\"\" Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: 1. the name of the new key 2. the key you'd like to summarise (first item in the tuple) 3. the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`. ![](split-apply-combine.png) Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3}, {'a': 3} ] (Clumper(list_dicts) .agg(mean_a=('a', 'mean'), min_b=('b', 'min'), max_b=('b', 'max')) .collect()) another_list_dicts = [ {'a': 1, 'c': 'a'}, {'a': 2, 'c': 'b'}, {'a': 3, 'c': 'a'} ] (Clumper(another_list_dicts) .group_by('c') .agg(mean_a=('a', 'mean'), uniq_a=('a', 'unique')) .collect()) ``` \"\"\" funcs = { \"mean\" : self . mean , \"count\" : self . count , \"unique\" : self . unique , \"n_unique\" : self . n_unique , \"sum\" : self . sum , \"min\" : self . min , \"max\" : self . max , } res = { name : funcs [ func_str ]( col ) for name , ( col , func_str ) in kwargs . items ()} return Clumper ([ res ], groups = self . groups ) Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min , max . Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ()) collect ( self ) \u00b6 Show source code in clumper/clump.py 437 438 439 440 441 442 443 def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](collect.png) \"\"\" return self . blob Returns a list instead of a Clumper object. concat ( self , * other ) \u00b6 Show source code in clumper/clump.py 132 133 134 135 136 137 138 def concat ( self , * other ): \"\"\" Concatenate two or more `Clumper` objects together. ![](concat.png) \"\"\" return Clumper ( self . blob + other . blob ) Concatenate two or more Clumper objects together. copy ( self ) \u00b6 Show source code in clumper/clump.py 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 def copy ( self ): \"\"\" Makes a copy of the collection. ![](copy.png) Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] c1 = Clumper(list_dicts) c2 = c1.copy() assert id(c1) != id(c2) ``` \"\"\" return self . create_new ([ d for d in self . blob ]) Makes a copy of the collection. Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] c1 = Clumper ( list_dicts ) c2 = c1 . copy () assert id ( c1 ) != id ( c2 ) count ( self , col ) \u00b6 Show source code in clumper/clump.py 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 @return_value_if_empty ( value = None ) def count ( self , col ): \"\"\" Counts how often a key appears in the collection. ![](count.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).count(\"a\") Clumper(list_of_dicts).count(\"b\") ``` \"\"\" return len ([ 1 for d in self if col in d . keys ()]) Counts how often a key appears in the collection. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . count ( \"a\" ) Clumper ( list_of_dicts ) . count ( \"b\" ) create_new ( self , blob ) \u00b6 Show source code in clumper/clump.py 33 34 35 36 37 38 def create_new ( self , blob ): \"\"\" Creates a new collection of data while preserving settings of the current collection (most notably, `groups`). \"\"\" return Clumper ( blob , groups = self . groups ) Creates a new collection of data while preserving settings of the current collection (most notably, groups ). drop ( self , * keys ) \u00b6 Show source code in clumper/clump.py 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 def drop ( self , * keys ): \"\"\" Removes a subset of keys from each item in the collection. ![](drop.png) Arguments: keys: the keys to remove Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] (Clumper(list_dicts) .drop('a', 'c') .collect()) ``` \"\"\" return self . create_new ( [{ k : v for k , v in d . items () if k not in keys } for d in self . blob ] ) Removes a subset of keys from each item in the collection. Parameters Name Type Description Default *keys the keys to remove () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] ( Clumper ( list_dicts ) . drop ( 'a' , 'c' ) . collect ()) group_by ( self , * cols ) \u00b6 Show source code in clumper/clump.py 40 41 42 43 44 45 46 47 48 49 def group_by ( self , * cols ): \"\"\" Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with `.ungroup()`. ![](groupby.png) \"\"\" self . groups = cols return self Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with .ungroup() . group_combos ( self ) \u00b6 Show source code in clumper/clump.py 140 141 142 143 144 145 146 147 def group_combos ( self ): \"\"\" Returns a dictionary of group-value/clumper pairs. \"\"\" combinations = [ comb for comb in it . product ( * [ self . unique ( c ) for c in self . groups ]) ] return [{ k : v for k , v in zip ( self . groups , comb )} for comb in combinations ] Returns a dictionary of group-value/clumper pairs. head ( self , n = 5 ) \u00b6 Show source code in clumper/clump.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] (Clumper(list_dicts) .head(2) .collect()) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return self . create_new ([ self . blob [ i ] for i in range ( n )]) Selects the top n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] ( Clumper ( list_dicts ) . head ( 2 ) . collect ()) keep ( self , * funcs ) \u00b6 Show source code in clumper/clump.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] (Clumper(list_dicts) .keep(lambda d: d['a'] >= 3) .collect()) ``` \"\"\" data = self . blob . copy () for func in funcs : data = [ d for d in data if func ( d )] return self . create_new ( data ) Allows you to select which items to keep and which items to remove. Parameters Name Type Description Default *funcs functions that indicate which items to keep () Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] ( Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) . collect ()) map ( self , func ) \u00b6 Show source code in clumper/clump.py 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 def map ( self , func ): \"\"\" Directly map one item to another one using a function. If you're dealing with dictionaries, consider using `mutate` instead. ![](map.png Arguments: func: the function that will map each item Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}] (Clumper(list_dicts) .map(lambda d: {'a': d['a'], 'b': 1}) .collect()) ``` \"\"\" return self . create_new ([ func ( d ) for d in self . blob ]) Directly map one item to another one using a function. If you're dealing with dictionaries, consider using mutate instead. ![](map.png Parameters Name Type Description Default func the function that will map each item required Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }] ( Clumper ( list_dicts ) . map ( lambda d : { 'a' : d [ 'a' ], 'b' : 1 }) . collect ()) max ( self , col ) \u00b6 Show source code in clumper/clump.py 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 @return_value_if_empty ( value = None ) def max ( self , col ): \"\"\" Returns maximum value that a key has. ![](max.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).max(\"a\") Clumper(list_of_dicts).max(\"b\") ``` \"\"\" return max ({ d [ col ] for d in self if col in d . keys ()}) Returns maximum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . max ( \"a\" ) Clumper ( list_of_dicts ) . max ( \"b\" ) mean ( self , col ) \u00b6 Show source code in clumper/clump.py 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 @return_value_if_empty ( value = None ) def mean ( self , col ): \"\"\" Give the mean of the values that belong to a key. ![](mean.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).mean(\"a\") Clumper(list_of_dicts).mean(\"b\") ``` \"\"\" s = sum ([ d [ col ] for d in self if col in d . keys ()]) return s / len ( self ) Give the mean of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . mean ( \"a\" ) Clumper ( list_of_dicts ) . mean ( \"b\" ) min ( self , col ) \u00b6 Show source code in clumper/clump.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 @return_value_if_empty ( value = None ) def min ( self , col ): \"\"\" Returns minimum value that a key has. ![](min.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).min(\"a\") Clumper(list_of_dicts).min(\"b\") ``` \"\"\" return min ([ d [ col ] for d in self if col in d . keys ()]) Returns minimum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . min ( \"a\" ) Clumper ( list_of_dicts ) . min ( \"b\" ) mutate ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 @grouped def mutate ( self , ** kwargs ): \"\"\" Adds or overrides key-value pairs in the collection of dictionaries. ![](mutate.png) Arguments: kwargs: keyword arguments of keyname/function-pairs Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] (Clumper(list_dicts) .mutate(c=lambda d: d['a'] + d['b'], s=lambda d: d['a'] + d['b'] + d['c']) .collect()) ``` \"\"\" data = [] for d in self . blob . copy (): new = { k : v for k , v in d . items ()} for key , func in kwargs . items (): new [ key ] = func ( new ) data . append ( new ) return self . create_new ( data ) Adds or overrides key-value pairs in the collection of dictionaries. Parameters Name Type Description Default **kwargs keyword arguments of keyname/function-pairs {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ]) . collect ()) n_unique ( self , col ) \u00b6 Show source code in clumper/clump.py 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 @return_value_if_empty ( value = 0 ) def n_unique ( self , col ): \"\"\" Returns number of unique values that a key has. ![](n_unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).n_unique(\"a\") Clumper(list_of_dicts).n_unique(\"b\") ``` \"\"\" return len ({ d [ col ] for d in self if col in d . keys ()}) Returns number of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . n_unique ( \"a\" ) Clumper ( list_of_dicts ) . n_unique ( \"b\" ) pipe ( self , func , * args , ** kwargs ) \u00b6 Show source code in clumper/clump.py 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def pipe ( self , func , * args , ** kwargs ): \"\"\" Applies a function to the `Clumper` object in a chain-able manner. Arguments: func: function to apply args: arguments that will be passed to the function kwargs: keyword-arguments that will be passed to the function Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] def remove_outliers(clump, min_a=20, max_a=80): return (clump .keep(lambda d: d['a'] >= min_a, lambda d: d['a'] <= max_a)) (Clumper(list_dicts) .pipe(remove_outliers, min_a=10, max_a=90) .collect()) ``` \"\"\" return func ( self , * args , ** kwargs ) Applies a function to the Clumper object in a chain-able manner. Parameters Name Type Description Default func function to apply required *args arguments that will be passed to the function () **kwargs keyword-arguments that will be passed to the function {} Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] def remove_outliers ( clump , min_a = 20 , max_a = 80 ): return ( clump . keep ( lambda d : d [ 'a' ] >= min_a , lambda d : d [ 'a' ] <= max_a )) ( Clumper ( list_dicts ) . pipe ( remove_outliers , min_a = 10 , max_a = 90 ) . collect ()) reduce ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 def reduce ( self , ** kwargs ): \"\"\" Reduce the collection using reducing functions. ![](reduce.png) Arguments: kwargs: key-function pairs Usage: ```python from clumper import Clumper list_ints = [1, 2, 3, 4, 5] (Clumper(list_ints) .reduce(sum_a = lambda x,y: x + y, min_a = lambda x,y: min(x, y), max_a = lambda x,y: max(x, y)) .collect()) ``` \"\"\" return self . create_new ( [{ k : reduce ( func , [ b for b in self . blob ]) for k , func in kwargs . items ()}] ) Reduce the collection using reducing functions. Parameters Name Type Description Default **kwargs key-function pairs {} Usage: from clumper import Clumper list_ints = [ 1 , 2 , 3 , 4 , 5 ] ( Clumper ( list_ints ) . reduce ( sum_a = lambda x , y : x + y , min_a = lambda x , y : min ( x , y ), max_a = lambda x , y : max ( x , y )) . collect ()) select ( self , * keys ) \u00b6 Show source code in clumper/clump.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] (Clumper(list_dicts) .select('a', 'b') .collect()) ``` \"\"\" return self . create_new ([{ k : d [ k ] for k in keys } for d in self . blob ]) Selects a subset of the keys in each item in the collection. Parameters Name Type Description Default *keys the keys to keep () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] ( Clumper ( list_dicts ) . select ( 'a' , 'b' ) . collect ()) sort ( self , key , reverse = False ) \u00b6 Show source code in clumper/clump.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 @grouped def sort ( self , key , reverse = False ): \"\"\" Allows you to sort the collection of dictionaries. ![](sort.png) Arguments: key: the number of items to grab reverse: the number of items to grab Warning: This method is aware of groups. Expect different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 3, 'b': 3}, {'a': 2, 'b': 1}] (Clumper(list_dicts) .sort(lambda d: d['a']) .collect()) (Clumper(list_dicts) .sort(lambda d: d['b'], reverse=True) .collect()) ``` \"\"\" return self . create_new ( sorted ( self . blob , key = key , reverse = reverse )) Allows you to sort the collection of dictionaries. Parameters Name Type Description Default key the number of items to grab required reverse the number of items to grab False Warning This method is aware of groups. Expect different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ()) sum ( self , col ) \u00b6 Show source code in clumper/clump.py 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 @return_value_if_empty ( value = None ) def sum ( self , col ): \"\"\" Give the sum of the values that belong to a key. ![](sum.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).sum(\"a\") Clumper(list_of_dicts).sum(\"b\") ``` \"\"\" return sum ([ d [ col ] for d in self if col in d . keys ()]) Give the sum of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" ) tail ( self , n = 5 ) \u00b6 Show source code in clumper/clump.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 def tail ( self , n = 5 ): \"\"\" Selects the bottom `n` items from the collection. ![](tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] (Clumper(list_dicts) .tail(2) .collect()) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return self . create_new ([ self . blob [ - i ] for i in range ( len ( self ) - n , len ( self ))]) Selects the bottom n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] ( Clumper ( list_dicts ) . tail ( 2 ) . collect ()) ungroup ( self ) \u00b6 Show source code in clumper/clump.py 51 52 53 54 55 56 57 58 def ungroup ( self ): \"\"\" Removes all grouping from the collection. ![](ungroup.png) \"\"\" self . groups = tuple () return self Removes all grouping from the collection. unique ( self , col ) \u00b6 Show source code in clumper/clump.py 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 @return_value_if_empty ( value = []) def unique ( self , col ): \"\"\" Returns a set of unique values that a key has. ![](unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).unique(\"a\") Clumper(list_of_dicts).unique(\"b\") ``` \"\"\" return list ({ d [ col ] for d in self if col in d . keys ()}) Returns a set of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . unique ( \"a\" ) Clumper ( list_of_dicts ) . unique ( \"b\" )","title":"Clumper"},{"location":"api/clumper.html#clumper","text":"This object adds methods to a list of dictionaries that make it nicer to explore. Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts )","title":"Clumper"},{"location":"api/clumper.html#clumper.clump.Clumper.agg","text":"Show source code in clumper/clump.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @grouped def agg ( self , ** kwargs ): \"\"\" Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: 1. the name of the new key 2. the key you'd like to summarise (first item in the tuple) 3. the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`. ![](split-apply-combine.png) Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3}, {'a': 3} ] (Clumper(list_dicts) .agg(mean_a=('a', 'mean'), min_b=('b', 'min'), max_b=('b', 'max')) .collect()) another_list_dicts = [ {'a': 1, 'c': 'a'}, {'a': 2, 'c': 'b'}, {'a': 3, 'c': 'a'} ] (Clumper(another_list_dicts) .group_by('c') .agg(mean_a=('a', 'mean'), uniq_a=('a', 'unique')) .collect()) ``` \"\"\" funcs = { \"mean\" : self . mean , \"count\" : self . count , \"unique\" : self . unique , \"n_unique\" : self . n_unique , \"sum\" : self . sum , \"min\" : self . min , \"max\" : self . max , } res = { name : funcs [ func_str ]( col ) for name , ( col , func_str ) in kwargs . items ()} return Clumper ([ res ], groups = self . groups ) Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min , max . Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ())","title":"agg()"},{"location":"api/clumper.html#clumper.clump.Clumper.collect","text":"Show source code in clumper/clump.py 437 438 439 440 441 442 443 def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](collect.png) \"\"\" return self . blob Returns a list instead of a Clumper object.","title":"collect()"},{"location":"api/clumper.html#clumper.clump.Clumper.concat","text":"Show source code in clumper/clump.py 132 133 134 135 136 137 138 def concat ( self , * other ): \"\"\" Concatenate two or more `Clumper` objects together. ![](concat.png) \"\"\" return Clumper ( self . blob + other . blob ) Concatenate two or more Clumper objects together.","title":"concat()"},{"location":"api/clumper.html#clumper.clump.Clumper.copy","text":"Show source code in clumper/clump.py 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 def copy ( self ): \"\"\" Makes a copy of the collection. ![](copy.png) Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] c1 = Clumper(list_dicts) c2 = c1.copy() assert id(c1) != id(c2) ``` \"\"\" return self . create_new ([ d for d in self . blob ]) Makes a copy of the collection. Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] c1 = Clumper ( list_dicts ) c2 = c1 . copy () assert id ( c1 ) != id ( c2 )","title":"copy()"},{"location":"api/clumper.html#clumper.clump.Clumper.count","text":"Show source code in clumper/clump.py 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 @return_value_if_empty ( value = None ) def count ( self , col ): \"\"\" Counts how often a key appears in the collection. ![](count.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).count(\"a\") Clumper(list_of_dicts).count(\"b\") ``` \"\"\" return len ([ 1 for d in self if col in d . keys ()]) Counts how often a key appears in the collection. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . count ( \"a\" ) Clumper ( list_of_dicts ) . count ( \"b\" )","title":"count()"},{"location":"api/clumper.html#clumper.clump.Clumper.create_new","text":"Show source code in clumper/clump.py 33 34 35 36 37 38 def create_new ( self , blob ): \"\"\" Creates a new collection of data while preserving settings of the current collection (most notably, `groups`). \"\"\" return Clumper ( blob , groups = self . groups ) Creates a new collection of data while preserving settings of the current collection (most notably, groups ).","title":"create_new()"},{"location":"api/clumper.html#clumper.clump.Clumper.drop","text":"Show source code in clumper/clump.py 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 def drop ( self , * keys ): \"\"\" Removes a subset of keys from each item in the collection. ![](drop.png) Arguments: keys: the keys to remove Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] (Clumper(list_dicts) .drop('a', 'c') .collect()) ``` \"\"\" return self . create_new ( [{ k : v for k , v in d . items () if k not in keys } for d in self . blob ] ) Removes a subset of keys from each item in the collection. Parameters Name Type Description Default *keys the keys to remove () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] ( Clumper ( list_dicts ) . drop ( 'a' , 'c' ) . collect ())","title":"drop()"},{"location":"api/clumper.html#clumper.clump.Clumper.group_by","text":"Show source code in clumper/clump.py 40 41 42 43 44 45 46 47 48 49 def group_by ( self , * cols ): \"\"\" Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with `.ungroup()`. ![](groupby.png) \"\"\" self . groups = cols return self Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with .ungroup() .","title":"group_by()"},{"location":"api/clumper.html#clumper.clump.Clumper.group_combos","text":"Show source code in clumper/clump.py 140 141 142 143 144 145 146 147 def group_combos ( self ): \"\"\" Returns a dictionary of group-value/clumper pairs. \"\"\" combinations = [ comb for comb in it . product ( * [ self . unique ( c ) for c in self . groups ]) ] return [{ k : v for k , v in zip ( self . groups , comb )} for comb in combinations ] Returns a dictionary of group-value/clumper pairs.","title":"group_combos()"},{"location":"api/clumper.html#clumper.clump.Clumper.head","text":"Show source code in clumper/clump.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] (Clumper(list_dicts) .head(2) .collect()) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return self . create_new ([ self . blob [ i ] for i in range ( n )]) Selects the top n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] ( Clumper ( list_dicts ) . head ( 2 ) . collect ())","title":"head()"},{"location":"api/clumper.html#clumper.clump.Clumper.keep","text":"Show source code in clumper/clump.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] (Clumper(list_dicts) .keep(lambda d: d['a'] >= 3) .collect()) ``` \"\"\" data = self . blob . copy () for func in funcs : data = [ d for d in data if func ( d )] return self . create_new ( data ) Allows you to select which items to keep and which items to remove. Parameters Name Type Description Default *funcs functions that indicate which items to keep () Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] ( Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) . collect ())","title":"keep()"},{"location":"api/clumper.html#clumper.clump.Clumper.map","text":"Show source code in clumper/clump.py 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 def map ( self , func ): \"\"\" Directly map one item to another one using a function. If you're dealing with dictionaries, consider using `mutate` instead. ![](map.png Arguments: func: the function that will map each item Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}] (Clumper(list_dicts) .map(lambda d: {'a': d['a'], 'b': 1}) .collect()) ``` \"\"\" return self . create_new ([ func ( d ) for d in self . blob ]) Directly map one item to another one using a function. If you're dealing with dictionaries, consider using mutate instead. ![](map.png Parameters Name Type Description Default func the function that will map each item required Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }] ( Clumper ( list_dicts ) . map ( lambda d : { 'a' : d [ 'a' ], 'b' : 1 }) . collect ())","title":"map()"},{"location":"api/clumper.html#clumper.clump.Clumper.max","text":"Show source code in clumper/clump.py 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 @return_value_if_empty ( value = None ) def max ( self , col ): \"\"\" Returns maximum value that a key has. ![](max.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).max(\"a\") Clumper(list_of_dicts).max(\"b\") ``` \"\"\" return max ({ d [ col ] for d in self if col in d . keys ()}) Returns maximum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . max ( \"a\" ) Clumper ( list_of_dicts ) . max ( \"b\" )","title":"max()"},{"location":"api/clumper.html#clumper.clump.Clumper.mean","text":"Show source code in clumper/clump.py 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 @return_value_if_empty ( value = None ) def mean ( self , col ): \"\"\" Give the mean of the values that belong to a key. ![](mean.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).mean(\"a\") Clumper(list_of_dicts).mean(\"b\") ``` \"\"\" s = sum ([ d [ col ] for d in self if col in d . keys ()]) return s / len ( self ) Give the mean of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . mean ( \"a\" ) Clumper ( list_of_dicts ) . mean ( \"b\" )","title":"mean()"},{"location":"api/clumper.html#clumper.clump.Clumper.min","text":"Show source code in clumper/clump.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 @return_value_if_empty ( value = None ) def min ( self , col ): \"\"\" Returns minimum value that a key has. ![](min.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).min(\"a\") Clumper(list_of_dicts).min(\"b\") ``` \"\"\" return min ([ d [ col ] for d in self if col in d . keys ()]) Returns minimum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . min ( \"a\" ) Clumper ( list_of_dicts ) . min ( \"b\" )","title":"min()"},{"location":"api/clumper.html#clumper.clump.Clumper.mutate","text":"Show source code in clumper/clump.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 @grouped def mutate ( self , ** kwargs ): \"\"\" Adds or overrides key-value pairs in the collection of dictionaries. ![](mutate.png) Arguments: kwargs: keyword arguments of keyname/function-pairs Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] (Clumper(list_dicts) .mutate(c=lambda d: d['a'] + d['b'], s=lambda d: d['a'] + d['b'] + d['c']) .collect()) ``` \"\"\" data = [] for d in self . blob . copy (): new = { k : v for k , v in d . items ()} for key , func in kwargs . items (): new [ key ] = func ( new ) data . append ( new ) return self . create_new ( data ) Adds or overrides key-value pairs in the collection of dictionaries. Parameters Name Type Description Default **kwargs keyword arguments of keyname/function-pairs {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ]) . collect ())","title":"mutate()"},{"location":"api/clumper.html#clumper.clump.Clumper.n_unique","text":"Show source code in clumper/clump.py 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 @return_value_if_empty ( value = 0 ) def n_unique ( self , col ): \"\"\" Returns number of unique values that a key has. ![](n_unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).n_unique(\"a\") Clumper(list_of_dicts).n_unique(\"b\") ``` \"\"\" return len ({ d [ col ] for d in self if col in d . keys ()}) Returns number of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . n_unique ( \"a\" ) Clumper ( list_of_dicts ) . n_unique ( \"b\" )","title":"n_unique()"},{"location":"api/clumper.html#clumper.clump.Clumper.pipe","text":"Show source code in clumper/clump.py 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 def pipe ( self , func , * args , ** kwargs ): \"\"\" Applies a function to the `Clumper` object in a chain-able manner. Arguments: func: function to apply args: arguments that will be passed to the function kwargs: keyword-arguments that will be passed to the function Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] def remove_outliers(clump, min_a=20, max_a=80): return (clump .keep(lambda d: d['a'] >= min_a, lambda d: d['a'] <= max_a)) (Clumper(list_dicts) .pipe(remove_outliers, min_a=10, max_a=90) .collect()) ``` \"\"\" return func ( self , * args , ** kwargs ) Applies a function to the Clumper object in a chain-able manner. Parameters Name Type Description Default func function to apply required *args arguments that will be passed to the function () **kwargs keyword-arguments that will be passed to the function {} Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] def remove_outliers ( clump , min_a = 20 , max_a = 80 ): return ( clump . keep ( lambda d : d [ 'a' ] >= min_a , lambda d : d [ 'a' ] <= max_a )) ( Clumper ( list_dicts ) . pipe ( remove_outliers , min_a = 10 , max_a = 90 ) . collect ())","title":"pipe()"},{"location":"api/clumper.html#clumper.clump.Clumper.reduce","text":"Show source code in clumper/clump.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 def reduce ( self , ** kwargs ): \"\"\" Reduce the collection using reducing functions. ![](reduce.png) Arguments: kwargs: key-function pairs Usage: ```python from clumper import Clumper list_ints = [1, 2, 3, 4, 5] (Clumper(list_ints) .reduce(sum_a = lambda x,y: x + y, min_a = lambda x,y: min(x, y), max_a = lambda x,y: max(x, y)) .collect()) ``` \"\"\" return self . create_new ( [{ k : reduce ( func , [ b for b in self . blob ]) for k , func in kwargs . items ()}] ) Reduce the collection using reducing functions. Parameters Name Type Description Default **kwargs key-function pairs {} Usage: from clumper import Clumper list_ints = [ 1 , 2 , 3 , 4 , 5 ] ( Clumper ( list_ints ) . reduce ( sum_a = lambda x , y : x + y , min_a = lambda x , y : min ( x , y ), max_a = lambda x , y : max ( x , y )) . collect ())","title":"reduce()"},{"location":"api/clumper.html#clumper.clump.Clumper.select","text":"Show source code in clumper/clump.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] (Clumper(list_dicts) .select('a', 'b') .collect()) ``` \"\"\" return self . create_new ([{ k : d [ k ] for k in keys } for d in self . blob ]) Selects a subset of the keys in each item in the collection. Parameters Name Type Description Default *keys the keys to keep () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] ( Clumper ( list_dicts ) . select ( 'a' , 'b' ) . collect ())","title":"select()"},{"location":"api/clumper.html#clumper.clump.Clumper.sort","text":"Show source code in clumper/clump.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 @grouped def sort ( self , key , reverse = False ): \"\"\" Allows you to sort the collection of dictionaries. ![](sort.png) Arguments: key: the number of items to grab reverse: the number of items to grab Warning: This method is aware of groups. Expect different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 3, 'b': 3}, {'a': 2, 'b': 1}] (Clumper(list_dicts) .sort(lambda d: d['a']) .collect()) (Clumper(list_dicts) .sort(lambda d: d['b'], reverse=True) .collect()) ``` \"\"\" return self . create_new ( sorted ( self . blob , key = key , reverse = reverse )) Allows you to sort the collection of dictionaries. Parameters Name Type Description Default key the number of items to grab required reverse the number of items to grab False Warning This method is aware of groups. Expect different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ())","title":"sort()"},{"location":"api/clumper.html#clumper.clump.Clumper.sum","text":"Show source code in clumper/clump.py 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 @return_value_if_empty ( value = None ) def sum ( self , col ): \"\"\" Give the sum of the values that belong to a key. ![](sum.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).sum(\"a\") Clumper(list_of_dicts).sum(\"b\") ``` \"\"\" return sum ([ d [ col ] for d in self if col in d . keys ()]) Give the sum of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" )","title":"sum()"},{"location":"api/clumper.html#clumper.clump.Clumper.tail","text":"Show source code in clumper/clump.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 def tail ( self , n = 5 ): \"\"\" Selects the bottom `n` items from the collection. ![](tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] (Clumper(list_dicts) .tail(2) .collect()) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return self . create_new ([ self . blob [ - i ] for i in range ( len ( self ) - n , len ( self ))]) Selects the bottom n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] ( Clumper ( list_dicts ) . tail ( 2 ) . collect ())","title":"tail()"},{"location":"api/clumper.html#clumper.clump.Clumper.ungroup","text":"Show source code in clumper/clump.py 51 52 53 54 55 56 57 58 def ungroup ( self ): \"\"\" Removes all grouping from the collection. ![](ungroup.png) \"\"\" self . groups = tuple () return self Removes all grouping from the collection.","title":"ungroup()"},{"location":"api/clumper.html#clumper.clump.Clumper.unique","text":"Show source code in clumper/clump.py 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 @return_value_if_empty ( value = []) def unique ( self , col ): \"\"\" Returns a set of unique values that a key has. ![](unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).unique(\"a\") Clumper(list_of_dicts).unique(\"b\") ``` \"\"\" return list ({ d [ col ] for d in self if col in d . keys ()}) Returns a set of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . unique ( \"a\" ) Clumper ( list_of_dicts ) . unique ( \"b\" )","title":"unique()"},{"location":"guides/advanced.html","text":"Advanced: Dict vs. Anything \u00b6 Although this library has lists of dictionaries in mind, we actually don't force this on you. We just assume a sequence as input and from here it's your responsibility to come up with reasonable lambda functions for the verbs. Most verbs are flexible enough that they don't assume the lambda functions to act on dictionaries. For example. If you look at this code: .sort(lambda d: d) Then you can infer that we're sorting based on whatever the value in our collection is. It would work on a list of integers, floats or characters. If you'd instead have: .sort(lambda d: d[0]) Then it wouldn't work anymore if d is a integer, float or string but it would work if d is a list, tuple or a dictionary with a key of 0 available. Integer Example \u00b6 Here we take the top 50 numbers from a list and then sort. from clumper import Clumper ( Clumper ( range ( 100 )) . head ( 50 ) . sort ( lambda d : d , reverse = True )) Character Example \u00b6 Here we start out with a sequence of letters and we turn it into a collection of dictionaries. from clumper import Clumper ( Clumper ( 'abcedfghijklmnopqrstuvwxyz' ) . map ( lambda c : { 'char' : c , 'ord' : ord ( c )})) Verbs that need Dictionaries \u00b6 There's a short list verbs that have some restrictions .select() needs to select keys so the sequences must contain dictionaries .drop() needs to remove keys so the sequences must contain dictionaries .agg() needs a collection of dictionaries to construct aggregations. If you really need this feature for non-dictionary sequences consider the .reduce() method. .mutate() is really flexible in terms of input that it accepts but it will always produce a dictionary as output. If you really need a non-dictionary output, consider the map() method.","title":"Advanced Details"},{"location":"guides/advanced.html#advanced-dict-vs-anything","text":"Although this library has lists of dictionaries in mind, we actually don't force this on you. We just assume a sequence as input and from here it's your responsibility to come up with reasonable lambda functions for the verbs. Most verbs are flexible enough that they don't assume the lambda functions to act on dictionaries. For example. If you look at this code: .sort(lambda d: d) Then you can infer that we're sorting based on whatever the value in our collection is. It would work on a list of integers, floats or characters. If you'd instead have: .sort(lambda d: d[0]) Then it wouldn't work anymore if d is a integer, float or string but it would work if d is a list, tuple or a dictionary with a key of 0 available.","title":"Advanced: Dict vs. Anything"},{"location":"guides/advanced.html#integer-example","text":"Here we take the top 50 numbers from a list and then sort. from clumper import Clumper ( Clumper ( range ( 100 )) . head ( 50 ) . sort ( lambda d : d , reverse = True ))","title":"Integer Example"},{"location":"guides/advanced.html#character-example","text":"Here we start out with a sequence of letters and we turn it into a collection of dictionaries. from clumper import Clumper ( Clumper ( 'abcedfghijklmnopqrstuvwxyz' ) . map ( lambda c : { 'char' : c , 'ord' : ord ( c )}))","title":"Character Example"},{"location":"guides/advanced.html#verbs-that-need-dictionaries","text":"There's a short list verbs that have some restrictions .select() needs to select keys so the sequences must contain dictionaries .drop() needs to remove keys so the sequences must contain dictionaries .agg() needs a collection of dictionaries to construct aggregations. If you really need this feature for non-dictionary sequences consider the .reduce() method. .mutate() is really flexible in terms of input that it accepts but it will always produce a dictionary as output. If you really need a non-dictionary output, consider the map() method.","title":"Verbs that need Dictionaries"},{"location":"guides/getting-started.html","text":"Getting Started \u00b6 This library offers tools to deal with nested json data structure. To demonstrate how it might work we'll download a dataset locally. It's a list of dictionaries that contains information about pokemon. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib . request . urlopen ( url ) as f : pokemon = json . loads ( f . read ()) Here's the first two examples from this list; [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}] There's about 800 dictionaries in our list which is big enough to want to not go through manually but also small enough that we don't need to worry too much about performance. Example \u00b6 Let's run a basic example. from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) This is the result of this query. [{'name': 'Diglett', 'type': 'Ground', 'ratio': 5.5}, {'name': 'DeoxysAttack Forme', 'type': 'Psychic', 'ratio': 3.6}, {'name': 'Krabby', 'type': 'Water', 'ratio': 3.5}, {'name': 'DeoxysNormal Forme', 'type': 'Psychic', 'ratio': 3.0}, {'name': 'BanetteMega Banette', 'type': 'Ghost', 'ratio': 2.578125}] Here's what the code did. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper collection. It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. These dictionaries will also get a property called ratio which is the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries. Design \u00b6 The idea behind the library is that the API is like the English language. We could say that the dataset is like a noun and that each method is like a verb . Each verb will tell the API what will needs to happen to the data and the input to the verb will tell you how how this will happen. For example, the .keep() method will filter out data and how it will filter data is explained by the lambda function that we pass in. The idea is that most analyses that you'd be interested in doing can be constructed using just these verbs. You can see a detailed view of how to use all the verbs in the api description . We did not come up with this way of thinking about data analysis. In fact, this library is heavily inspired by the dplyr library in R .","title":"Getting Started"},{"location":"guides/getting-started.html#getting-started","text":"This library offers tools to deal with nested json data structure. To demonstrate how it might work we'll download a dataset locally. It's a list of dictionaries that contains information about pokemon. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib . request . urlopen ( url ) as f : pokemon = json . loads ( f . read ()) Here's the first two examples from this list; [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}] There's about 800 dictionaries in our list which is big enough to want to not go through manually but also small enough that we don't need to worry too much about performance.","title":"Getting Started"},{"location":"guides/getting-started.html#example","text":"Let's run a basic example. from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) This is the result of this query. [{'name': 'Diglett', 'type': 'Ground', 'ratio': 5.5}, {'name': 'DeoxysAttack Forme', 'type': 'Psychic', 'ratio': 3.6}, {'name': 'Krabby', 'type': 'Water', 'ratio': 3.5}, {'name': 'DeoxysNormal Forme', 'type': 'Psychic', 'ratio': 3.0}, {'name': 'BanetteMega Banette', 'type': 'Ghost', 'ratio': 2.578125}] Here's what the code did. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper collection. It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. These dictionaries will also get a property called ratio which is the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries.","title":"Example"},{"location":"guides/getting-started.html#design","text":"The idea behind the library is that the API is like the English language. We could say that the dataset is like a noun and that each method is like a verb . Each verb will tell the API what will needs to happen to the data and the input to the verb will tell you how how this will happen. For example, the .keep() method will filter out data and how it will filter data is explained by the lambda function that we pass in. The idea is that most analyses that you'd be interested in doing can be constructed using just these verbs. You can see a detailed view of how to use all the verbs in the api description . We did not come up with this way of thinking about data analysis. In fact, this library is heavily inspired by the dplyr library in R .","title":"Design"},{"location":"guides/summary-methods.html","text":"The Clumper object also offers useful methods that aren't verbs. In particular there's a lovely set that can calculate summaries on keys. Each of these methods has a string equivalent that is used in .agg() when making aggregations. Here's a few common ones. .mean() \u00b6 You can calculate the mean of values for which a key exists. .count() \u00b6 You can count the number of rows for which a key exists. .unique() \u00b6 You can retreive all unique values for a certain key. .n_unique() \u00b6 You can the number of unique values for a certain key. .sum() \u00b6 You can calculate the sum of values for which a key exists. .min() \u00b6 You can calculate the minimum of values for which a key exists. .max() \u00b6 You can calculate the maximum of values for which a key exists.","title":"Summary Methods"},{"location":"guides/summary-methods.html#mean","text":"You can calculate the mean of values for which a key exists.","title":".mean()"},{"location":"guides/summary-methods.html#count","text":"You can count the number of rows for which a key exists.","title":".count()"},{"location":"guides/summary-methods.html#unique","text":"You can retreive all unique values for a certain key.","title":".unique()"},{"location":"guides/summary-methods.html#n_unique","text":"You can the number of unique values for a certain key.","title":".n_unique()"},{"location":"guides/summary-methods.html#sum","text":"You can calculate the sum of values for which a key exists.","title":".sum()"},{"location":"guides/summary-methods.html#min","text":"You can calculate the minimum of values for which a key exists.","title":".min()"},{"location":"guides/summary-methods.html#max","text":"You can calculate the maximum of values for which a key exists.","title":".max()"},{"location":"guides/verbs.html","text":"This document is to help give you an overview of what kind of verbs are in this library. What are Verbs? \u00b6 In this library verbs are special kinds of methods. They really are just methods in essense but they imply a general pattern. In Clumper , a verb is a method that; Always returns a Clumper back, so it's chain-able. Has a name that tells you what is happening to the data while the parameters tell you how it is changing the data. This combination of properties allows you to write code in the same way you'd explain the steps to a human. Take this code for example. from clumper import Clumper list_of_dicts = [ { 'a' : 7 , 'b' : 2 }, { 'a' : 2 , 'b' : 4 }, { 'a' : 3 , 'b' : 6 } ] ( Clumper ( list_of_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ]) . sort ( lambda d : d [ 'c' ])) Schematically, this is what the code does. Mutate \u00b6 First we use the mutate verb. This allows us to add values to pairs in our collection. The output of this step is another Clumper collection. Sort \u00b6 Next we pick up the mutated collection and we apply a sort to it. Again, the output of this another Clumper . This means that we can keep adding steps as we further our analysis. Method Chaining \u00b6 This style of programming is really powerful and it keeps you productive once you've gotten a hang of the lambda functions. The lambda functions that you pass in can be general python. This also means that you're free to use nested dictionaries, sets or whatever you like doing in python. Common Verbs \u00b6 Here's a list of the verbs that you'll most likely use the most. Keep \u00b6 The keep verb allows you to grab a subset from the original collection. Mutate \u00b6 The mutate verb allows you to add/overwrite data to each item in the collection. Sort \u00b6 The sort verb allows you to sort the collection based on values of items. Select \u00b6 The select verb allows you to select a subset of keys for each item. Drop \u00b6 The select verb allows you to remove a subset of keys for each item. Group By \u00b6 The group_by verb allows you to set a group on a collection based on the values of the keys that you pass. The groups represent subsets and certain verbs will change their behavior if there are groups present. The main use-case for this verb is in combination with .agg() . Ungroup \u00b6 The ungroup verb will remove any groups currently present. Agg \u00b6 The agg verb is short for aggregate. They allow you to summarise the data, keeping in mind any groups that are on it. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min and max . For more information on how they work you can read more info here .","title":"Understanding Verbs"},{"location":"guides/verbs.html#what-are-verbs","text":"In this library verbs are special kinds of methods. They really are just methods in essense but they imply a general pattern. In Clumper , a verb is a method that; Always returns a Clumper back, so it's chain-able. Has a name that tells you what is happening to the data while the parameters tell you how it is changing the data. This combination of properties allows you to write code in the same way you'd explain the steps to a human. Take this code for example. from clumper import Clumper list_of_dicts = [ { 'a' : 7 , 'b' : 2 }, { 'a' : 2 , 'b' : 4 }, { 'a' : 3 , 'b' : 6 } ] ( Clumper ( list_of_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ]) . sort ( lambda d : d [ 'c' ])) Schematically, this is what the code does.","title":"What are Verbs?"},{"location":"guides/verbs.html#mutate","text":"First we use the mutate verb. This allows us to add values to pairs in our collection. The output of this step is another Clumper collection.","title":"Mutate"},{"location":"guides/verbs.html#sort","text":"Next we pick up the mutated collection and we apply a sort to it. Again, the output of this another Clumper . This means that we can keep adding steps as we further our analysis.","title":"Sort"},{"location":"guides/verbs.html#method-chaining","text":"This style of programming is really powerful and it keeps you productive once you've gotten a hang of the lambda functions. The lambda functions that you pass in can be general python. This also means that you're free to use nested dictionaries, sets or whatever you like doing in python.","title":"Method Chaining"},{"location":"guides/verbs.html#common-verbs","text":"Here's a list of the verbs that you'll most likely use the most.","title":"Common Verbs"},{"location":"guides/verbs.html#keep","text":"The keep verb allows you to grab a subset from the original collection.","title":"Keep"},{"location":"guides/verbs.html#mutate_1","text":"The mutate verb allows you to add/overwrite data to each item in the collection.","title":"Mutate"},{"location":"guides/verbs.html#sort_1","text":"The sort verb allows you to sort the collection based on values of items.","title":"Sort"},{"location":"guides/verbs.html#select","text":"The select verb allows you to select a subset of keys for each item.","title":"Select"},{"location":"guides/verbs.html#drop","text":"The select verb allows you to remove a subset of keys for each item.","title":"Drop"},{"location":"guides/verbs.html#group-by","text":"The group_by verb allows you to set a group on a collection based on the values of the keys that you pass. The groups represent subsets and certain verbs will change their behavior if there are groups present. The main use-case for this verb is in combination with .agg() .","title":"Group By"},{"location":"guides/verbs.html#ungroup","text":"The ungroup verb will remove any groups currently present.","title":"Ungroup"},{"location":"guides/verbs.html#agg","text":"The agg verb is short for aggregate. They allow you to summarise the data, keeping in mind any groups that are on it. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min and max . For more information on how they work you can read more info here .","title":"Agg"}]}