{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Clumper \u00b6 A small library that can clump sequences of data together. Part of a video series on calmcode.io . Early Notice \u00b6 This package is quite new and not a whole lot of users have been able to find all the edge cases yet. Each verb in our library has at least one test, but there may be edges. Base Example \u00b6 Clumper allows you to quickly parse through a list of data. Here's an example of a list of dictionaries. pokemon = [ { 'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'hp': 45, 'attack': 49 }, { 'name': 'Charmander', 'type': ['Fire'], 'hp': 39, 'attack': 52 }, ... ] Download this dataset. You can fetch the dataset by from the commandline. wget https://calmcode.io/datasets/pokemon.json You can fetch the dataset by from python. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib.request.urlopen(url) as f: pokemon = json.loads(f.read()) You can also download it manually here . Given this list of dictionaries we can write the following query; from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) What this code does line-by-line. This code will perform the following steps. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper . It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. The dictionaries that are left will also have a property called ratio which calculates the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries. This is what we get back: [{ 'name' : 'Diglett' , 'type' : 'Ground' , 'ratio' : 5.5 }, { 'name' : 'DeoxysAttack Forme' , 'type' : 'Psychic' , 'ratio' : 3.6 }, { 'name' : 'Krabby' , 'type' : 'Water' , 'ratio' : 3.5 }, { 'name' : 'DeoxysNormal Forme' , 'type' : 'Psychic' , 'ratio' : 3.0 }, { 'name' : 'BanetteMega Banette' , 'type' : 'Ghost' , 'ratio' : 2.578125 }] Features \u00b6 This library has no dependencies besides a modern version of python. The library offers a pattern of verbs that are very expressive. You can write code from top to bottom, left to right. MIT License Installation \u00b6 You can install this package via pip . pip install clumper It may be safer however to install via; python -m pip install clumper For details on why, check out this resource . Contributing \u00b6 Make sure you check out the issue list beforehand. New features should be discussed first and we also want to prevent that two people are working on the same thing. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:koaning/clumper.git cd clumper make install-dev Bugs \u00b6 If you encounter a bug, we'd love to hear about it! We would appreciate though if you could add a reproducible example when you submit an issue on github . We've included some methods to our library to make this relatively easy. Here's an example of a reproducible code-block. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }] clump = Clumper ( data ) expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected ) Note how this block uses .equals() to demonstrate what the expected output is. This is great for maintainers because they can just copy the code and work on a fix. Origin Stories \u00b6 Why the name? \u00b6 Sometimes you just want something to \"clump\" together in the right way. So we turned the word \"clump\" into a verb and into a python package. How did it get started? \u00b6 The origin of this package was educational. It got started as free educational content on calmcode.io to demonstrate how to make your own package. If you're interested in learning how this package got made you can watch a small documented series of the lessons learned.","title":"Index"},{"location":"index.html#clumper","text":"A small library that can clump sequences of data together. Part of a video series on calmcode.io .","title":"Clumper"},{"location":"index.html#early-notice","text":"This package is quite new and not a whole lot of users have been able to find all the edge cases yet. Each verb in our library has at least one test, but there may be edges.","title":"Early Notice"},{"location":"index.html#base-example","text":"Clumper allows you to quickly parse through a list of data. Here's an example of a list of dictionaries. pokemon = [ { 'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'hp': 45, 'attack': 49 }, { 'name': 'Charmander', 'type': ['Fire'], 'hp': 39, 'attack': 52 }, ... ] Download this dataset. You can fetch the dataset by from the commandline. wget https://calmcode.io/datasets/pokemon.json You can fetch the dataset by from python. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib.request.urlopen(url) as f: pokemon = json.loads(f.read()) You can also download it manually here . Given this list of dictionaries we can write the following query; from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) What this code does line-by-line. This code will perform the following steps. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper . It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. The dictionaries that are left will also have a property called ratio which calculates the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries. This is what we get back: [{ 'name' : 'Diglett' , 'type' : 'Ground' , 'ratio' : 5.5 }, { 'name' : 'DeoxysAttack Forme' , 'type' : 'Psychic' , 'ratio' : 3.6 }, { 'name' : 'Krabby' , 'type' : 'Water' , 'ratio' : 3.5 }, { 'name' : 'DeoxysNormal Forme' , 'type' : 'Psychic' , 'ratio' : 3.0 }, { 'name' : 'BanetteMega Banette' , 'type' : 'Ghost' , 'ratio' : 2.578125 }]","title":"Base Example"},{"location":"index.html#features","text":"This library has no dependencies besides a modern version of python. The library offers a pattern of verbs that are very expressive. You can write code from top to bottom, left to right. MIT License","title":"Features"},{"location":"index.html#installation","text":"You can install this package via pip . pip install clumper It may be safer however to install via; python -m pip install clumper For details on why, check out this resource .","title":"Installation"},{"location":"index.html#contributing","text":"Make sure you check out the issue list beforehand. New features should be discussed first and we also want to prevent that two people are working on the same thing. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:koaning/clumper.git cd clumper make install-dev","title":"Contributing"},{"location":"index.html#bugs","text":"If you encounter a bug, we'd love to hear about it! We would appreciate though if you could add a reproducible example when you submit an issue on github . We've included some methods to our library to make this relatively easy. Here's an example of a reproducible code-block. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }] clump = Clumper ( data ) expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected ) Note how this block uses .equals() to demonstrate what the expected output is. This is great for maintainers because they can just copy the code and work on a fix.","title":"Bugs"},{"location":"index.html#origin-stories","text":"","title":"Origin Stories"},{"location":"index.html#why-the-name","text":"Sometimes you just want something to \"clump\" together in the right way. So we turned the word \"clump\" into a verb and into a python package.","title":"Why the name?"},{"location":"index.html#how-did-it-get-started","text":"The origin of this package was educational. It got started as free educational content on calmcode.io to demonstrate how to make your own package. If you're interested in learning how this package got made you can watch a small documented series of the lessons learned.","title":"How did it get started?"},{"location":"api/clumper.html","text":"Clumper \u00b6 This object adds methods to a list of dictionaries that make it nicer to explore. Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts ) agg ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 @dict_collection_only @grouped def agg ( self , ** kwargs ): \"\"\" Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: 1. the name of the new key 2. the key you'd like to summarise (first item in the tuple) 3. the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `var`, `std`, `first` or `last`. ![](../img/split-apply-combine.png) Warning: This method is aware of groups. There may be different results if a group is active. Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3}, {'a': 3} ] (Clumper(list_dicts) .agg(mean_a=('a', 'mean'), min_b=('b', 'min'), max_b=('b', 'max')) .collect()) another_list_dicts = [ {'a': 1, 'c': 'a'}, {'a': 2, 'c': 'b'}, {'a': 3, 'c': 'a'} ] (Clumper(another_list_dicts) .group_by('c') .agg(mean_a=('a', 'mean'), uniq_a=('a', 'unique')) .collect()) ``` Advanced Usage: You can also supply this verb your own functions if you'd like. ```python from clumper import Clumper data = [ {\"a\": 6, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", sum), u=(\"a\", lambda x: len(set(x))) expected = [ {'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]}, {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]} ] assert tfm_clump.equals(expected) ``` \"\"\" res = { name : self . summarise_col ( func_str , col ) for name , ( col , func_str ) in kwargs . items () } return Clumper ([ res ], groups = self . groups ) Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , var , std , first or last . Warning This method is aware of groups. There may be different results if a group is active. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ()) Advanced Usage: You can also supply this verb your own functions if you'd like. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : len ( set ( x ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected ) collect ( self ) \u00b6 Show source code in clumper/clump.py 869 870 871 872 873 874 875 def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](../img/collect.png) \"\"\" return self . blob Returns a list instead of a Clumper object. concat ( self , * other ) \u00b6 Show source code in clumper/clump.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 def concat ( self , * other ): \"\"\" Concatenate two or more `Clumper` objects together. ![](../img/concat.png) ```python from clumper import Clumper c1 = Clumper([{\"a\": 1}]) c2 = Clumper([{\"a\": 2}]) c3 = Clumper([{\"a\": 3}]) assert len(c1.concat(c2)) == 2 assert len(c1.concat(c2, c3)) == 3 assert len(c1.concat(c2).concat(c3)) == 3 ``` \"\"\" data = reduce ( lambda a , b : a + b , [ o . blob for o in other ]) return self . _create_new ( self . blob + data ) Concatenate two or more Clumper objects together. from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3 copy ( self ) \u00b6 Show source code in clumper/clump.py 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 def copy ( self ): \"\"\" Makes a copy of the collection. ![](../img/copy.png) Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] c1 = Clumper(list_dicts) c2 = c1.copy() assert id(c1) != id(c2) ``` \"\"\" return self . _create_new ([ d for d in self . blob ]) Makes a copy of the collection. Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] c1 = Clumper ( list_dicts ) c2 = c1 . copy () assert id ( c1 ) != id ( c2 ) count ( self , col ) \u00b6 Show source code in clumper/clump.py 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 @dict_collection_only @return_value_if_empty ( value = 0 ) def count ( self , col ): \"\"\" Counts how often a key appears in the collection. ![](../img/count.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).count(\"a\") == 4 assert Clumper(list_of_dicts).count(\"b\") == 3 ``` \"\"\" return self . summarise_col ( \"count\" , col ) Counts how often a key appears in the collection. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . count ( \"a\" ) == 4 assert Clumper ( list_of_dicts ) . count ( \"b\" ) == 3 drop ( self , * keys ) \u00b6 Show source code in clumper/clump.py 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 @dict_collection_only def drop ( self , * keys ): \"\"\" Removes a subset of keys from each item in the collection. ![](../img/drop.png) Arguments: keys: the keys to remove Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).drop('c') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ( [{ k : v for k , v in d . items () if k not in keys } for d in self . blob ] ) Removes a subset of keys from each item in the collection. Parameters Name Type Description Default *keys the keys to remove () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ]) drop_duplicates ( self ) \u00b6 Show source code in clumper/clump.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def drop_duplicates ( self ): \"\"\" Iterates over all elements to remove duplicates. ![](../img/drop_duplicates.png) Usage: ```python from clumper import Clumper data = [{\"a\": 1}, {\"a\": 2}, {\"a\": 2}] clump = Clumper(data).drop_duplicates() expected = [{\"a\": 1}, {\"a\": 2}] assert clump.equals(expected) ``` \"\"\" uniques = [] for d in self : if d not in uniques : uniques . append ( d ) return self . _create_new ( uniques ) Iterates over all elements to remove duplicates. Usage: from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected ) equals ( self , data ) \u00b6 Show source code in clumper/clump.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def equals ( self , data ): \"\"\" Compares the collection of items with a list. Returns `True` if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. ![](../img/equals.png) Arguments: data: a list of that to compare against Usage: ```python from clumper import Clumper data = [{\"a\": 1}] clump = Clumper(data) assert clump.equals(data) assert not clump.equals([{\"b\":1}]) ``` \"\"\" for i in self : if i not in data : return False for i in data : if i not in self : return False return True Compares the collection of items with a list. Returns True if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. Parameters Name Type Description Default data a list of that to compare against required Usage: from clumper import Clumper data = [{ \"a\" : 1 }] clump = Clumper ( data ) assert clump . equals ( data ) assert not clump . equals ([{ \"b\" : 1 }]) explode ( self , * to_explode , ** kwargs ) \u00b6 Show source code in clumper/clump.py 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 @dict_collection_only def explode ( self , * to_explode , ** kwargs ): \"\"\" Turns a list in an item into multiple items. The opposite of `.implode()`. ![](../img/explode.png) Arguments: to_explode: keys to explode, will keep the same name kwargs: (new name, keys to explode)-pairs Usage: ```python from clumper import Clumper data = [{'a': 1, 'items': [1, 2]}] clumper = Clumper(data).explode(\"items\") expected = [{'a': 1, 'items': 1}, {'a': 1, 'items': 2}] assert clumper.equals(expected) clumper = Clumper(data).explode(item=\"items\") expected = [{'a': 1, 'item': 1}, {'a': 1, 'item': 2}] assert clumper.equals(expected) ``` \"\"\" # you can keep the same name by just using *args or overwrite using **kwargs kwargs = { ** kwargs , ** { k : k for k in to_explode }} new_name , to_explode = kwargs . keys (), kwargs . values () res = [] for d in self . blob : combinations = it . product ( * [ d [ v ] for v in to_explode ]) for comb in combinations : new_dict = d . copy () for k , v in zip ( new_name , comb ): new_dict [ k ] = v res . append ( new_dict ) return self . _create_new ( res ) . drop ( * [ k for k in to_explode if k not in new_name ]) Turns a list in an item into multiple items. The opposite of .implode() . Parameters Name Type Description Default *to_explode keys to explode, will keep the same name () **kwargs (new name, keys to explode)-pairs {} Usage: from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) expected = [{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }] assert clumper . equals ( expected ) clumper = Clumper ( data ) . explode ( item = \"items\" ) expected = [{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }] assert clumper . equals ( expected ) group_by ( self , * cols ) \u00b6 Show source code in clumper/clump.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def group_by ( self , * cols ): \"\"\" Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with `.ungroup()`. ![](../img/groupby.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) ``` \"\"\" self . groups = cols return self Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with .ungroup() . from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) head ( self , n = 5 ) \u00b6 Show source code in clumper/clump.py 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](../img/head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).head(2) expected = [{'a': 1}, {'a': 2}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ([ self . blob [ i ] for i in range ( n )]) Selects the top n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . head ( 2 ) expected = [{ 'a' : 1 }, { 'a' : 2 }] assert result . equals ( expected ) inner_join ( self , other , mapping , lsuffix = '' , rsuffix = '_joined' ) \u00b6 Show source code in clumper/clump.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 @dict_collection_only def inner_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs an inner join on two collections. ![](../img/inner_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\":4}, {\"a\": 2, \"b\":6}, {\"a\": 3, \"b\":8}, ]) right = Clumper([ {\"c\": 9, \"b\":4}, {\"c\": 8, \"b\":5}, {\"c\": 7, \"b\":6}, ]) result = left.inner_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) return self . _create_new ( result ) Performs an inner join on two collections. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected ) keep ( self , * funcs ) \u00b6 Show source code in clumper/clump.py 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](../img/keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] clump = Clumper(list_dicts).keep(lambda d: d['a'] >= 3) expected = [{'a': 3}, {'a': 4}] assert clump.equals(expected) ``` \"\"\" data = self . blob . copy () for func in funcs : data = [ d for d in data if func ( d )] return self . _create_new ( data ) Allows you to select which items to keep and which items to remove. Parameters Name Type Description Default *funcs functions that indicate which items to keep () Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected ) keys ( self , overlap = False ) \u00b6 Show source code in clumper/clump.py 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 @dict_collection_only def keys ( self , overlap = False ): \"\"\" Returns all the keys of all the items in the collection. ![](../img/keys.png) Arguments: overlap: if `True` only return the keys that overlap in each set Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 2}, {'a': 2, 'c': 3}] assert set(Clumper(data).keys(overlap=True)) == {'a'} assert set(Clumper(data).keys(overlap=False)) == {'a', 'b', 'c'} ``` \"\"\" if overlap : all_keys = [ set ( d . keys ()) for d in self ] return list ( reduce ( lambda a , b : a . intersection ( b ), all_keys )) return list ({ k for d in self for k in d . keys ()}) Returns all the keys of all the items in the collection. Parameters Name Type Description Default overlap if True only return the keys that overlap in each set False Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'c' : 3 }] assert set ( Clumper ( data ) . keys ( overlap = True )) == { 'a' } assert set ( Clumper ( data ) . keys ( overlap = False )) == { 'a' , 'b' , 'c' } left_join ( self , other , mapping , lsuffix = '' , rsuffix = '_joined' ) \u00b6 Show source code in clumper/clump.py 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 @dict_collection_only def left_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. ![](../img/left_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\": 4}, {\"a\": 2, \"b\": 6}, {\"a\": 3, \"b\": 8}, ]) right = Clumper([ {\"c\": 9, \"b\": 4}, {\"c\": 8, \"b\": 5}, {\"c\": 7, \"b\": 6}, ]) result = left.left_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, {\"a\": 3, \"b\": 8}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] d_i_added = False for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) d_i_added = True if not d_i_added : result . append ( d_i ) return self . _create_new ( result ) Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected ) map ( self , func ) \u00b6 Show source code in clumper/clump.py 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 def map ( self , func ): \"\"\" Directly map one item to another one using a function. If you're dealing with dictionaries, consider using `mutate` instead. ![](../img/map.png) Arguments: func: the function that will map each item Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}] (Clumper(list_dicts) .map(lambda d: {'a': d['a'], 'b': 1}) .collect()) ``` \"\"\" return self . _create_new ([ func ( d ) for d in self . blob ]) Directly map one item to another one using a function. If you're dealing with dictionaries, consider using mutate instead. Parameters Name Type Description Default func the function that will map each item required Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }] ( Clumper ( list_dicts ) . map ( lambda d : { 'a' : d [ 'a' ], 'b' : 1 }) . collect ()) max ( self , col ) \u00b6 Show source code in clumper/clump.py 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 @dict_collection_only @return_value_if_empty ( value = None ) def max ( self , col ): \"\"\" Returns maximum value that a key has. ![](../img/max.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).max(\"a\") == 7 assert Clumper(list_of_dicts).max(\"b\") == 7 ``` \"\"\" return self . summarise_col ( \"max\" , col ) Returns maximum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . max ( \"a\" ) == 7 assert Clumper ( list_of_dicts ) . max ( \"b\" ) == 7 mean ( self , col ) \u00b6 Show source code in clumper/clump.py 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 @dict_collection_only @return_value_if_empty ( value = None ) def mean ( self , col ): \"\"\" Give the mean of the values that belong to a key. ![](../img/mean.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert round(Clumper(list_of_dicts).mean(\"a\"), 1) == 3.5 assert round(Clumper(list_of_dicts).mean(\"b\"), 1) == 6.7 ``` \"\"\" return self . summarise_col ( \"mean\" , col ) Give the mean of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert round ( Clumper ( list_of_dicts ) . mean ( \"a\" ), 1 ) == 3.5 assert round ( Clumper ( list_of_dicts ) . mean ( \"b\" ), 1 ) == 6.7 min ( self , col ) \u00b6 Show source code in clumper/clump.py 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 @dict_collection_only @return_value_if_empty ( value = None ) def min ( self , col ): \"\"\" Returns minimum value that a key has. ![](../img/min.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).min(\"a\") == 2 assert Clumper(list_of_dicts).min(\"b\") == 6 ``` \"\"\" return self . summarise_col ( \"min\" , col ) Returns minimum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . min ( \"a\" ) == 2 assert Clumper ( list_of_dicts ) . min ( \"b\" ) == 6 mutate ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 @grouped def mutate ( self , ** kwargs ): \"\"\" Adds or overrides key-value pairs in the collection of dictionaries. ![](../img/mutate.png) Arguments: kwargs: keyword arguments of keyname/function-pairs Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] result = (Clumper(list_dicts) .mutate(c=lambda d: d['a'] + d['b'], s=lambda d: d['a'] + d['b'] + d['c'])) expected = [ {'a': 1, 'b': 2, 'c': 3, 's': 6}, {'a': 2, 'b': 3, 'c': 5, 's': 10}, {'a': 1, 'b': 6, 'c': 7, 's': 14} ] assert result.equals(expected) ``` \"\"\" data = [] for d in self . blob . copy (): new = { k : v for k , v in d . items ()} for key , func in kwargs . items (): new [ key ] = func ( new ) data . append ( new ) return self . _create_new ( data ) Adds or overrides key-value pairs in the collection of dictionaries. Parameters Name Type Description Default **kwargs keyword arguments of keyname/function-pairs {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected ) n_unique ( self , col ) \u00b6 Show source code in clumper/clump.py 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 @dict_collection_only @return_value_if_empty ( value = 0 ) def n_unique ( self , col ): \"\"\" Returns number of unique values that a key has. ![](../img/nunique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).n_unique(\"a\") == 3 assert Clumper(list_of_dicts).n_unique(\"b\") == 2 ``` \"\"\" return self . summarise_col ( \"n_unique\" , col ) Returns number of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . n_unique ( \"a\" ) == 3 assert Clumper ( list_of_dicts ) . n_unique ( \"b\" ) == 2 pipe ( self , func , * args , ** kwargs ) \u00b6 Show source code in clumper/clump.py 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 def pipe ( self , func , * args , ** kwargs ): \"\"\" Applies a function to the `Clumper` object in a chain-able manner. ![](../img/pipe.png) Arguments: func: function to apply args: arguments that will be passed to the function kwargs: keyword-arguments that will be passed to the function Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] def remove_outliers(clump, min_a, max_a): return (clump .keep(lambda d: d['a'] >= min_a, lambda d: d['a'] <= max_a)) result = Clumper(list_dicts).pipe(remove_outliers, min_a=10, max_a=90) assert len(result) == 81 ``` \"\"\" return func ( self , * args , ** kwargs ) Applies a function to the Clumper object in a chain-able manner. Parameters Name Type Description Default func function to apply required *args arguments that will be passed to the function () **kwargs keyword-arguments that will be passed to the function {} Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] def remove_outliers ( clump , min_a , max_a ): return ( clump . keep ( lambda d : d [ 'a' ] >= min_a , lambda d : d [ 'a' ] <= max_a )) result = Clumper ( list_dicts ) . pipe ( remove_outliers , min_a = 10 , max_a = 90 ) assert len ( result ) == 81 read_json ( path ) (classmethod) \u00b6 Show source code in clumper/clump.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 @classmethod def read_json ( cls , path ): \"\"\" Reads in a json file. ![](../img/read_json.png) Usage: ```python from clumper import Clumper clump = Clumper.read_json(\"tests/pokemon.json\") assert len(clump) == 800 ``` \"\"\" return json . loads ( pathlib . Path ( path ) . read_text ()) Reads in a json file. Usage: from clumper import Clumper clump = Clumper . read_json ( \"tests/pokemon.json\" ) assert len ( clump ) == 800 reduce ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 def reduce ( self , ** kwargs ): \"\"\" Reduce the collection using reducing functions. ![](../img/reduce.png) Arguments: kwargs: key-function pairs Usage: ```python from clumper import Clumper list_ints = [1, 2, 3, 4, 5] (Clumper(list_ints) .reduce(sum_a = lambda x,y: x + y, min_a = lambda x,y: min(x, y), max_a = lambda x,y: max(x, y)) .collect()) ``` \"\"\" return self . _create_new ( [{ k : reduce ( func , [ b for b in self . blob ]) for k , func in kwargs . items ()}] ) Reduce the collection using reducing functions. Parameters Name Type Description Default **kwargs key-function pairs {} Usage: from clumper import Clumper list_ints = [ 1 , 2 , 3 , 4 , 5 ] ( Clumper ( list_ints ) . reduce ( sum_a = lambda x , y : x + y , min_a = lambda x , y : min ( x , y ), max_a = lambda x , y : max ( x , y )) . collect ()) rename ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 def rename ( self , ** kwargs ): \"\"\" Rename items in the collection. Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 3}, {'a': 2, 'b': 4}] clumper = Clumper(data).rename(c=\"b\") expected = [{'a': 1, 'c': 3}, {'a': 2, 'c': 4}] assert clumper.equals(expected) ``` \"\"\" result = self . copy () for new_name , old_name in kwargs . items (): result = result . mutate ( ** { new_name : lambda d : d [ old_name ]}) . drop ( old_name ) return result Rename items in the collection. Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 3 }, { 'a' : 2 , 'b' : 4 }] clumper = Clumper ( data ) . rename ( c = \"b\" ) expected = [{ 'a' : 1 , 'c' : 3 }, { 'a' : 2 , 'c' : 4 }] assert clumper . equals ( expected ) select ( self , * keys ) \u00b6 Show source code in clumper/clump.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 @dict_collection_only def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](../img/select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).select('a', 'b') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ([{ k : d [ k ] for k in keys } for d in self . blob ]) Selects a subset of the keys in each item in the collection. Parameters Name Type Description Default *keys the keys to keep () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ]) sort ( self , key , reverse = False ) \u00b6 Show source code in clumper/clump.py 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 @grouped def sort ( self , key , reverse = False ): \"\"\" Allows you to sort the collection of dictionaries. ![](../img/sort.png) Arguments: key: the number of items to grab reverse: the number of items to grab Warning: This method is aware of groups. Expect different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 3, 'b': 3}, {'a': 2, 'b': 1}] (Clumper(list_dicts) .sort(lambda d: d['a']) .collect()) (Clumper(list_dicts) .sort(lambda d: d['b'], reverse=True) .collect()) ``` \"\"\" return self . _create_new ( sorted ( self . blob , key = key , reverse = reverse )) Allows you to sort the collection of dictionaries. Parameters Name Type Description Default key the number of items to grab required reverse the number of items to grab False Warning This method is aware of groups. Expect different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ()) sum ( self , col ) \u00b6 Show source code in clumper/clump.py 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 @dict_collection_only @return_value_if_empty ( value = None ) def sum ( self , col ): \"\"\" Give the sum of the values that belong to a key. ![](../img/sum.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).sum(\"a\") Clumper(list_of_dicts).sum(\"b\") ``` \"\"\" return self . summarise_col ( \"sum\" , col ) Give the sum of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" ) summarise_col ( self , func , key ) \u00b6 Show source code in clumper/clump.py 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 def summarise_col ( self , func , key ): \"\"\" Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `var`, `std`, `first` or `last`. Note that this method **ignores groups**. It also does not return a `Clumper` collection. Usage: ```python from clumper import Clump clump = Clumper([{\"a\": 1}, {\"a\": 2}, {\"a\": 3}]) assert clump.summarise_col(\"last\", \"a\") == 3 assert clump.summarise_col(lambda d: d[-1], \"a\") == 3 ``` \"\"\" funcs = { \"mean\" : mean , \"count\" : lambda d : len ( d ), \"unique\" : lambda d : list ( set ( d )), \"n_unique\" : lambda d : len ( set ( d )), \"sum\" : sum , \"min\" : min , \"max\" : max , \"median\" : median , \"var\" : variance , \"std\" : stdev , \"values\" : lambda d : d , \"first\" : lambda d : d [ 0 ], \"last\" : lambda d : d [ - 1 ], } if isinstance ( func , str ): if func not in funcs . keys (): raise ValueError ( f \"Passed `func` must be in { funcs . keys () } , got { func } .\" ) func = funcs [ func ] array = [ d [ key ] for d in self if key in d . keys ()] return func ( array ) Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , var , std , first or last . Note that this method ignores groups . It also does not return a Clumper collection. Usage: from clumper import Clump clump = Clumper ([{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 3 }]) assert clump . summarise_col ( \"last\" , \"a\" ) == 3 assert clump . summarise_col ( lambda d : d [ - 1 ], \"a\" ) == 3 tail ( self , n = 5 ) \u00b6 Show source code in clumper/clump.py 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 def tail ( self , n = 5 ): \"\"\" Selects the bottom `n` items from the collection. ![](../img/tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).tail(2) expected = [{'a': 3}, {'a': 4}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ( self . blob [ len ( self ) - n : len ( self )]) Selects the bottom n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . tail ( 2 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert result . equals ( expected ) transform ( self , ** kwargs ) \u00b6 Show source code in clumper/clump.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 @grouped @dict_collection_only def transform ( self , ** kwargs ): \"\"\" Does an aggregation just like `.agg()` however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. ![](../img/transform-with-groups.png) Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper data = [ {\"a\": 6, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", \"sum\"), u=(\"a\", \"unique\"))) expected = [ {'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]}, {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]} ] assert tfm_clump.equals(expected) ``` \"\"\" agg_results = self . agg ( ** kwargs ) return self . left_join ( agg_results , mapping = { k : k for k in self . groups }) Does an aggregation just like .agg() however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected ) ungroup ( self ) \u00b6 Show source code in clumper/clump.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def ungroup ( self ): \"\"\" Removes all grouping from the collection. ![](../img/ungroup.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) assert clump.ungroup().groups == tuple() ``` \"\"\" self . groups = tuple () return self Removes all grouping from the collection. from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple () unique ( self , col ) \u00b6 Show source code in clumper/clump.py 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 @dict_collection_only @return_value_if_empty ( value = []) def unique ( self , col ): \"\"\" Returns a set of unique values that a key has. ![](../img/unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).unique(\"a\") == [2, 3, 7] assert Clumper(list_of_dicts).unique(\"b\") == [6, 7] ``` \"\"\" return self . summarise_col ( \"unique\" , col ) Returns a set of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . unique ( \"a\" ) == [ 2 , 3 , 7 ] assert Clumper ( list_of_dicts ) . unique ( \"b\" ) == [ 6 , 7 ]","title":"Clumper"},{"location":"api/clumper.html#clumper","text":"This object adds methods to a list of dictionaries that make it nicer to explore. Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts )","title":"Clumper"},{"location":"api/clumper.html#clumper.clump.Clumper.agg","text":"Show source code in clumper/clump.py 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 @dict_collection_only @grouped def agg ( self , ** kwargs ): \"\"\" Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: 1. the name of the new key 2. the key you'd like to summarise (first item in the tuple) 3. the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `var`, `std`, `first` or `last`. ![](../img/split-apply-combine.png) Warning: This method is aware of groups. There may be different results if a group is active. Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3}, {'a': 3} ] (Clumper(list_dicts) .agg(mean_a=('a', 'mean'), min_b=('b', 'min'), max_b=('b', 'max')) .collect()) another_list_dicts = [ {'a': 1, 'c': 'a'}, {'a': 2, 'c': 'b'}, {'a': 3, 'c': 'a'} ] (Clumper(another_list_dicts) .group_by('c') .agg(mean_a=('a', 'mean'), uniq_a=('a', 'unique')) .collect()) ``` Advanced Usage: You can also supply this verb your own functions if you'd like. ```python from clumper import Clumper data = [ {\"a\": 6, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", sum), u=(\"a\", lambda x: len(set(x))) expected = [ {'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]}, {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]} ] assert tfm_clump.equals(expected) ``` \"\"\" res = { name : self . summarise_col ( func_str , col ) for name , ( col , func_str ) in kwargs . items () } return Clumper ([ res ], groups = self . groups ) Does an aggregation on a collection of dictionaries. If there are no groups active then this method will create a single dictionary containing a summary. If there are groups active then the dataset will first split up, then apply the summaries after which everything is combined again into a single collection. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , var , std , first or last . Warning This method is aware of groups. There may be different results if a group is active. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ()) Advanced Usage: You can also supply this verb your own functions if you'd like. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : len ( set ( x ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected )","title":"agg()"},{"location":"api/clumper.html#clumper.clump.Clumper.collect","text":"Show source code in clumper/clump.py 869 870 871 872 873 874 875 def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](../img/collect.png) \"\"\" return self . blob Returns a list instead of a Clumper object.","title":"collect()"},{"location":"api/clumper.html#clumper.clump.Clumper.concat","text":"Show source code in clumper/clump.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 def concat ( self , * other ): \"\"\" Concatenate two or more `Clumper` objects together. ![](../img/concat.png) ```python from clumper import Clumper c1 = Clumper([{\"a\": 1}]) c2 = Clumper([{\"a\": 2}]) c3 = Clumper([{\"a\": 3}]) assert len(c1.concat(c2)) == 2 assert len(c1.concat(c2, c3)) == 3 assert len(c1.concat(c2).concat(c3)) == 3 ``` \"\"\" data = reduce ( lambda a , b : a + b , [ o . blob for o in other ]) return self . _create_new ( self . blob + data ) Concatenate two or more Clumper objects together. from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3","title":"concat()"},{"location":"api/clumper.html#clumper.clump.Clumper.copy","text":"Show source code in clumper/clump.py 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 def copy ( self ): \"\"\" Makes a copy of the collection. ![](../img/copy.png) Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] c1 = Clumper(list_dicts) c2 = c1.copy() assert id(c1) != id(c2) ``` \"\"\" return self . _create_new ([ d for d in self . blob ]) Makes a copy of the collection. Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] c1 = Clumper ( list_dicts ) c2 = c1 . copy () assert id ( c1 ) != id ( c2 )","title":"copy()"},{"location":"api/clumper.html#clumper.clump.Clumper.count","text":"Show source code in clumper/clump.py 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 @dict_collection_only @return_value_if_empty ( value = 0 ) def count ( self , col ): \"\"\" Counts how often a key appears in the collection. ![](../img/count.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).count(\"a\") == 4 assert Clumper(list_of_dicts).count(\"b\") == 3 ``` \"\"\" return self . summarise_col ( \"count\" , col ) Counts how often a key appears in the collection. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . count ( \"a\" ) == 4 assert Clumper ( list_of_dicts ) . count ( \"b\" ) == 3","title":"count()"},{"location":"api/clumper.html#clumper.clump.Clumper.drop","text":"Show source code in clumper/clump.py 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 @dict_collection_only def drop ( self , * keys ): \"\"\" Removes a subset of keys from each item in the collection. ![](../img/drop.png) Arguments: keys: the keys to remove Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).drop('c') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ( [{ k : v for k , v in d . items () if k not in keys } for d in self . blob ] ) Removes a subset of keys from each item in the collection. Parameters Name Type Description Default *keys the keys to remove () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"drop()"},{"location":"api/clumper.html#clumper.clump.Clumper.drop_duplicates","text":"Show source code in clumper/clump.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def drop_duplicates ( self ): \"\"\" Iterates over all elements to remove duplicates. ![](../img/drop_duplicates.png) Usage: ```python from clumper import Clumper data = [{\"a\": 1}, {\"a\": 2}, {\"a\": 2}] clump = Clumper(data).drop_duplicates() expected = [{\"a\": 1}, {\"a\": 2}] assert clump.equals(expected) ``` \"\"\" uniques = [] for d in self : if d not in uniques : uniques . append ( d ) return self . _create_new ( uniques ) Iterates over all elements to remove duplicates. Usage: from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected )","title":"drop_duplicates()"},{"location":"api/clumper.html#clumper.clump.Clumper.equals","text":"Show source code in clumper/clump.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def equals ( self , data ): \"\"\" Compares the collection of items with a list. Returns `True` if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. ![](../img/equals.png) Arguments: data: a list of that to compare against Usage: ```python from clumper import Clumper data = [{\"a\": 1}] clump = Clumper(data) assert clump.equals(data) assert not clump.equals([{\"b\":1}]) ``` \"\"\" for i in self : if i not in data : return False for i in data : if i not in self : return False return True Compares the collection of items with a list. Returns True if they have the same contents. Note that we do not care about the order of the elements. This method is used internally for testing but it can also be very useful for bug reporting. Parameters Name Type Description Default data a list of that to compare against required Usage: from clumper import Clumper data = [{ \"a\" : 1 }] clump = Clumper ( data ) assert clump . equals ( data ) assert not clump . equals ([{ \"b\" : 1 }])","title":"equals()"},{"location":"api/clumper.html#clumper.clump.Clumper.explode","text":"Show source code in clumper/clump.py 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 @dict_collection_only def explode ( self , * to_explode , ** kwargs ): \"\"\" Turns a list in an item into multiple items. The opposite of `.implode()`. ![](../img/explode.png) Arguments: to_explode: keys to explode, will keep the same name kwargs: (new name, keys to explode)-pairs Usage: ```python from clumper import Clumper data = [{'a': 1, 'items': [1, 2]}] clumper = Clumper(data).explode(\"items\") expected = [{'a': 1, 'items': 1}, {'a': 1, 'items': 2}] assert clumper.equals(expected) clumper = Clumper(data).explode(item=\"items\") expected = [{'a': 1, 'item': 1}, {'a': 1, 'item': 2}] assert clumper.equals(expected) ``` \"\"\" # you can keep the same name by just using *args or overwrite using **kwargs kwargs = { ** kwargs , ** { k : k for k in to_explode }} new_name , to_explode = kwargs . keys (), kwargs . values () res = [] for d in self . blob : combinations = it . product ( * [ d [ v ] for v in to_explode ]) for comb in combinations : new_dict = d . copy () for k , v in zip ( new_name , comb ): new_dict [ k ] = v res . append ( new_dict ) return self . _create_new ( res ) . drop ( * [ k for k in to_explode if k not in new_name ]) Turns a list in an item into multiple items. The opposite of .implode() . Parameters Name Type Description Default *to_explode keys to explode, will keep the same name () **kwargs (new name, keys to explode)-pairs {} Usage: from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) expected = [{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }] assert clumper . equals ( expected ) clumper = Clumper ( data ) . explode ( item = \"items\" ) expected = [{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }] assert clumper . equals ( expected )","title":"explode()"},{"location":"api/clumper.html#clumper.clump.Clumper.group_by","text":"Show source code in clumper/clump.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def group_by ( self , * cols ): \"\"\" Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with `.ungroup()`. ![](../img/groupby.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) ``` \"\"\" self . groups = cols return self Sets a group on this clumper object or overrides a previous setting. A group will affect how some verbs behave. You can undo this behavior with .ungroup() . from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , )","title":"group_by()"},{"location":"api/clumper.html#clumper.clump.Clumper.head","text":"Show source code in clumper/clump.py 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](../img/head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).head(2) expected = [{'a': 1}, {'a': 2}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ([ self . blob [ i ] for i in range ( n )]) Selects the top n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . head ( 2 ) expected = [{ 'a' : 1 }, { 'a' : 2 }] assert result . equals ( expected )","title":"head()"},{"location":"api/clumper.html#clumper.clump.Clumper.inner_join","text":"Show source code in clumper/clump.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 @dict_collection_only def inner_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs an inner join on two collections. ![](../img/inner_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\":4}, {\"a\": 2, \"b\":6}, {\"a\": 3, \"b\":8}, ]) right = Clumper([ {\"c\": 9, \"b\":4}, {\"c\": 8, \"b\":5}, {\"c\": 7, \"b\":6}, ]) result = left.inner_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) return self . _create_new ( result ) Performs an inner join on two collections. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected )","title":"inner_join()"},{"location":"api/clumper.html#clumper.clump.Clumper.keep","text":"Show source code in clumper/clump.py 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](../img/keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] clump = Clumper(list_dicts).keep(lambda d: d['a'] >= 3) expected = [{'a': 3}, {'a': 4}] assert clump.equals(expected) ``` \"\"\" data = self . blob . copy () for func in funcs : data = [ d for d in data if func ( d )] return self . _create_new ( data ) Allows you to select which items to keep and which items to remove. Parameters Name Type Description Default *funcs functions that indicate which items to keep () Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected )","title":"keep()"},{"location":"api/clumper.html#clumper.clump.Clumper.keys","text":"Show source code in clumper/clump.py 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 @dict_collection_only def keys ( self , overlap = False ): \"\"\" Returns all the keys of all the items in the collection. ![](../img/keys.png) Arguments: overlap: if `True` only return the keys that overlap in each set Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 2}, {'a': 2, 'c': 3}] assert set(Clumper(data).keys(overlap=True)) == {'a'} assert set(Clumper(data).keys(overlap=False)) == {'a', 'b', 'c'} ``` \"\"\" if overlap : all_keys = [ set ( d . keys ()) for d in self ] return list ( reduce ( lambda a , b : a . intersection ( b ), all_keys )) return list ({ k for d in self for k in d . keys ()}) Returns all the keys of all the items in the collection. Parameters Name Type Description Default overlap if True only return the keys that overlap in each set False Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'c' : 3 }] assert set ( Clumper ( data ) . keys ( overlap = True )) == { 'a' } assert set ( Clumper ( data ) . keys ( overlap = False )) == { 'a' , 'b' , 'c' }","title":"keys()"},{"location":"api/clumper.html#clumper.clump.Clumper.left_join","text":"Show source code in clumper/clump.py 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 @dict_collection_only def left_join ( self , other , mapping , lsuffix = \"\" , rsuffix = \"_joined\" ): \"\"\" Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. ![](../img/left_join.png) Arguments: other: another collection to join with mapping: a dictionary of **left-keys**:**right-keys** that explain how to join lsuffix: a suffix to add to the left keys in case of an overlap rsuffix: a suffix to add to the right keys in case of an overlap Usage: ```python from clumper import Clumper left = Clumper([ {\"a\": 1, \"b\": 4}, {\"a\": 2, \"b\": 6}, {\"a\": 3, \"b\": 8}, ]) right = Clumper([ {\"c\": 9, \"b\": 4}, {\"c\": 8, \"b\": 5}, {\"c\": 7, \"b\": 6}, ]) result = left.left_join(right, mapping={\"b\": \"b\"}) expected = [ {\"a\": 1, \"b\": 4, \"c\": 9}, {\"a\": 2, \"b\": 6, \"c\": 7}, {\"a\": 3, \"b\": 8}, ] assert result.equals(expected) ``` \"\"\" result = [] # This is a naive implementation. Speedup seems possible. for d_i in self : values_i = [ d_i [ k ] for k in mapping . keys () if k in d_i . keys ()] d_i_added = False for d_j in other : values_j = [ d_j [ k ] for k in mapping . values () if k in d_j . keys ()] if len ( mapping ) == len ( values_i ) == len ( values_j ): if values_i == values_j : result . append ( Clumper . _merge_dicts ( d_i , d_j , mapping , lsuffix , rsuffix ) ) d_i_added = True if not d_i_added : result . append ( d_i ) return self . _create_new ( result ) Performs a left join on two collections. Each item from the left set will appear in the final collection. Only some items from the right set may appear if a merge is possible. There may be multiple copies of the left set if it can be joined multiple times. Parameters Name Type Description Default other another collection to join with required mapping a dictionary of left-keys : right-keys that explain how to join required lsuffix a suffix to add to the left keys in case of an overlap '' rsuffix a suffix to add to the right keys in case of an overlap '_joined' Usage: from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected )","title":"left_join()"},{"location":"api/clumper.html#clumper.clump.Clumper.map","text":"Show source code in clumper/clump.py 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 def map ( self , func ): \"\"\" Directly map one item to another one using a function. If you're dealing with dictionaries, consider using `mutate` instead. ![](../img/map.png) Arguments: func: the function that will map each item Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}] (Clumper(list_dicts) .map(lambda d: {'a': d['a'], 'b': 1}) .collect()) ``` \"\"\" return self . _create_new ([ func ( d ) for d in self . blob ]) Directly map one item to another one using a function. If you're dealing with dictionaries, consider using mutate instead. Parameters Name Type Description Default func the function that will map each item required Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }] ( Clumper ( list_dicts ) . map ( lambda d : { 'a' : d [ 'a' ], 'b' : 1 }) . collect ())","title":"map()"},{"location":"api/clumper.html#clumper.clump.Clumper.max","text":"Show source code in clumper/clump.py 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 @dict_collection_only @return_value_if_empty ( value = None ) def max ( self , col ): \"\"\" Returns maximum value that a key has. ![](../img/max.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).max(\"a\") == 7 assert Clumper(list_of_dicts).max(\"b\") == 7 ``` \"\"\" return self . summarise_col ( \"max\" , col ) Returns maximum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . max ( \"a\" ) == 7 assert Clumper ( list_of_dicts ) . max ( \"b\" ) == 7","title":"max()"},{"location":"api/clumper.html#clumper.clump.Clumper.mean","text":"Show source code in clumper/clump.py 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 @dict_collection_only @return_value_if_empty ( value = None ) def mean ( self , col ): \"\"\" Give the mean of the values that belong to a key. ![](../img/mean.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert round(Clumper(list_of_dicts).mean(\"a\"), 1) == 3.5 assert round(Clumper(list_of_dicts).mean(\"b\"), 1) == 6.7 ``` \"\"\" return self . summarise_col ( \"mean\" , col ) Give the mean of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert round ( Clumper ( list_of_dicts ) . mean ( \"a\" ), 1 ) == 3.5 assert round ( Clumper ( list_of_dicts ) . mean ( \"b\" ), 1 ) == 6.7","title":"mean()"},{"location":"api/clumper.html#clumper.clump.Clumper.min","text":"Show source code in clumper/clump.py 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 @dict_collection_only @return_value_if_empty ( value = None ) def min ( self , col ): \"\"\" Returns minimum value that a key has. ![](../img/min.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).min(\"a\") == 2 assert Clumper(list_of_dicts).min(\"b\") == 6 ``` \"\"\" return self . summarise_col ( \"min\" , col ) Returns minimum value that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . min ( \"a\" ) == 2 assert Clumper ( list_of_dicts ) . min ( \"b\" ) == 6","title":"min()"},{"location":"api/clumper.html#clumper.clump.Clumper.mutate","text":"Show source code in clumper/clump.py 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 @grouped def mutate ( self , ** kwargs ): \"\"\" Adds or overrides key-value pairs in the collection of dictionaries. ![](../img/mutate.png) Arguments: kwargs: keyword arguments of keyname/function-pairs Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] result = (Clumper(list_dicts) .mutate(c=lambda d: d['a'] + d['b'], s=lambda d: d['a'] + d['b'] + d['c'])) expected = [ {'a': 1, 'b': 2, 'c': 3, 's': 6}, {'a': 2, 'b': 3, 'c': 5, 's': 10}, {'a': 1, 'b': 6, 'c': 7, 's': 14} ] assert result.equals(expected) ``` \"\"\" data = [] for d in self . blob . copy (): new = { k : v for k , v in d . items ()} for key , func in kwargs . items (): new [ key ] = func ( new ) data . append ( new ) return self . _create_new ( data ) Adds or overrides key-value pairs in the collection of dictionaries. Parameters Name Type Description Default **kwargs keyword arguments of keyname/function-pairs {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected )","title":"mutate()"},{"location":"api/clumper.html#clumper.clump.Clumper.n_unique","text":"Show source code in clumper/clump.py 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 @dict_collection_only @return_value_if_empty ( value = 0 ) def n_unique ( self , col ): \"\"\" Returns number of unique values that a key has. ![](../img/nunique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).n_unique(\"a\") == 3 assert Clumper(list_of_dicts).n_unique(\"b\") == 2 ``` \"\"\" return self . summarise_col ( \"n_unique\" , col ) Returns number of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . n_unique ( \"a\" ) == 3 assert Clumper ( list_of_dicts ) . n_unique ( \"b\" ) == 2","title":"n_unique()"},{"location":"api/clumper.html#clumper.clump.Clumper.pipe","text":"Show source code in clumper/clump.py 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 def pipe ( self , func , * args , ** kwargs ): \"\"\" Applies a function to the `Clumper` object in a chain-able manner. ![](../img/pipe.png) Arguments: func: function to apply args: arguments that will be passed to the function kwargs: keyword-arguments that will be passed to the function Usage: ```python from clumper import Clumper list_dicts = [{'a': i} for i in range(100)] def remove_outliers(clump, min_a, max_a): return (clump .keep(lambda d: d['a'] >= min_a, lambda d: d['a'] <= max_a)) result = Clumper(list_dicts).pipe(remove_outliers, min_a=10, max_a=90) assert len(result) == 81 ``` \"\"\" return func ( self , * args , ** kwargs ) Applies a function to the Clumper object in a chain-able manner. Parameters Name Type Description Default func function to apply required *args arguments that will be passed to the function () **kwargs keyword-arguments that will be passed to the function {} Usage: from clumper import Clumper list_dicts = [{ 'a' : i } for i in range ( 100 )] def remove_outliers ( clump , min_a , max_a ): return ( clump . keep ( lambda d : d [ 'a' ] >= min_a , lambda d : d [ 'a' ] <= max_a )) result = Clumper ( list_dicts ) . pipe ( remove_outliers , min_a = 10 , max_a = 90 ) assert len ( result ) == 81","title":"pipe()"},{"location":"api/clumper.html#clumper.clump.Clumper.read_json","text":"Show source code in clumper/clump.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 @classmethod def read_json ( cls , path ): \"\"\" Reads in a json file. ![](../img/read_json.png) Usage: ```python from clumper import Clumper clump = Clumper.read_json(\"tests/pokemon.json\") assert len(clump) == 800 ``` \"\"\" return json . loads ( pathlib . Path ( path ) . read_text ()) Reads in a json file. Usage: from clumper import Clumper clump = Clumper . read_json ( \"tests/pokemon.json\" ) assert len ( clump ) == 800","title":"read_json()"},{"location":"api/clumper.html#clumper.clump.Clumper.reduce","text":"Show source code in clumper/clump.py 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 def reduce ( self , ** kwargs ): \"\"\" Reduce the collection using reducing functions. ![](../img/reduce.png) Arguments: kwargs: key-function pairs Usage: ```python from clumper import Clumper list_ints = [1, 2, 3, 4, 5] (Clumper(list_ints) .reduce(sum_a = lambda x,y: x + y, min_a = lambda x,y: min(x, y), max_a = lambda x,y: max(x, y)) .collect()) ``` \"\"\" return self . _create_new ( [{ k : reduce ( func , [ b for b in self . blob ]) for k , func in kwargs . items ()}] ) Reduce the collection using reducing functions. Parameters Name Type Description Default **kwargs key-function pairs {} Usage: from clumper import Clumper list_ints = [ 1 , 2 , 3 , 4 , 5 ] ( Clumper ( list_ints ) . reduce ( sum_a = lambda x , y : x + y , min_a = lambda x , y : min ( x , y ), max_a = lambda x , y : max ( x , y )) . collect ())","title":"reduce()"},{"location":"api/clumper.html#clumper.clump.Clumper.rename","text":"Show source code in clumper/clump.py 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 def rename ( self , ** kwargs ): \"\"\" Rename items in the collection. Usage: ```python from clumper import Clumper data = [{'a': 1, 'b': 3}, {'a': 2, 'b': 4}] clumper = Clumper(data).rename(c=\"b\") expected = [{'a': 1, 'c': 3}, {'a': 2, 'c': 4}] assert clumper.equals(expected) ``` \"\"\" result = self . copy () for new_name , old_name in kwargs . items (): result = result . mutate ( ** { new_name : lambda d : d [ old_name ]}) . drop ( old_name ) return result Rename items in the collection. Usage: from clumper import Clumper data = [{ 'a' : 1 , 'b' : 3 }, { 'a' : 2 , 'b' : 4 }] clumper = Clumper ( data ) . rename ( c = \"b\" ) expected = [{ 'a' : 1 , 'c' : 3 }, { 'a' : 2 , 'c' : 4 }] assert clumper . equals ( expected )","title":"rename()"},{"location":"api/clumper.html#clumper.clump.Clumper.select","text":"Show source code in clumper/clump.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 @dict_collection_only def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](../img/select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).select('a', 'b') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return self . _create_new ([{ k : d [ k ] for k in keys } for d in self . blob ]) Selects a subset of the keys in each item in the collection. Parameters Name Type Description Default *keys the keys to keep () Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"select()"},{"location":"api/clumper.html#clumper.clump.Clumper.sort","text":"Show source code in clumper/clump.py 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 @grouped def sort ( self , key , reverse = False ): \"\"\" Allows you to sort the collection of dictionaries. ![](../img/sort.png) Arguments: key: the number of items to grab reverse: the number of items to grab Warning: This method is aware of groups. Expect different results if a group is active. Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 3, 'b': 3}, {'a': 2, 'b': 1}] (Clumper(list_dicts) .sort(lambda d: d['a']) .collect()) (Clumper(list_dicts) .sort(lambda d: d['b'], reverse=True) .collect()) ``` \"\"\" return self . _create_new ( sorted ( self . blob , key = key , reverse = reverse )) Allows you to sort the collection of dictionaries. Parameters Name Type Description Default key the number of items to grab required reverse the number of items to grab False Warning This method is aware of groups. Expect different results if a group is active. Usage: from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ())","title":"sort()"},{"location":"api/clumper.html#clumper.clump.Clumper.sum","text":"Show source code in clumper/clump.py 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 @dict_collection_only @return_value_if_empty ( value = None ) def sum ( self , col ): \"\"\" Give the sum of the values that belong to a key. ![](../img/sum.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] Clumper(list_of_dicts).sum(\"a\") Clumper(list_of_dicts).sum(\"b\") ``` \"\"\" return self . summarise_col ( \"sum\" , col ) Give the sum of the values that belong to a key. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" )","title":"sum()"},{"location":"api/clumper.html#clumper.clump.Clumper.summarise_col","text":"Show source code in clumper/clump.py 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 def summarise_col ( self , func , key ): \"\"\" Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: `mean`, `count`, `unique`, `n_unique`, `sum`, `min`, `max`, `median`, `var`, `std`, `first` or `last`. Note that this method **ignores groups**. It also does not return a `Clumper` collection. Usage: ```python from clumper import Clump clump = Clumper([{\"a\": 1}, {\"a\": 2}, {\"a\": 3}]) assert clump.summarise_col(\"last\", \"a\") == 3 assert clump.summarise_col(lambda d: d[-1], \"a\") == 3 ``` \"\"\" funcs = { \"mean\" : mean , \"count\" : lambda d : len ( d ), \"unique\" : lambda d : list ( set ( d )), \"n_unique\" : lambda d : len ( set ( d )), \"sum\" : sum , \"min\" : min , \"max\" : max , \"median\" : median , \"var\" : variance , \"std\" : stdev , \"values\" : lambda d : d , \"first\" : lambda d : d [ 0 ], \"last\" : lambda d : d [ - 1 ], } if isinstance ( func , str ): if func not in funcs . keys (): raise ValueError ( f \"Passed `func` must be in { funcs . keys () } , got { func } .\" ) func = funcs [ func ] array = [ d [ key ] for d in self if key in d . keys ()] return func ( array ) Apply your own summary function to a key in the collection. It can also accept a string and it will try to fetch an appropriate function for you. If you pass a string it must be either: mean , count , unique , n_unique , sum , min , max , median , var , std , first or last . Note that this method ignores groups . It also does not return a Clumper collection. Usage: from clumper import Clump clump = Clumper ([{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 3 }]) assert clump . summarise_col ( \"last\" , \"a\" ) == 3 assert clump . summarise_col ( lambda d : d [ - 1 ], \"a\" ) == 3","title":"summarise_col()"},{"location":"api/clumper.html#clumper.clump.Clumper.tail","text":"Show source code in clumper/clump.py 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 def tail ( self , n = 5 ): \"\"\" Selects the bottom `n` items from the collection. ![](../img/tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).tail(2) expected = [{'a': 3}, {'a': 4}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return self . _create_new ( self . blob [ len ( self ) - n : len ( self )]) Selects the bottom n items from the collection. Parameters Name Type Description Default n the number of items to grab 5 Usage: from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . tail ( 2 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert result . equals ( expected )","title":"tail()"},{"location":"api/clumper.html#clumper.clump.Clumper.transform","text":"Show source code in clumper/clump.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 @grouped @dict_collection_only def transform ( self , ** kwargs ): \"\"\" Does an aggregation just like `.agg()` however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. ![](../img/transform-with-groups.png) Arguments: kwargs: keyword arguments that represent the aggregation that is about to happen, see usage below. Warning: This method is aware of groups. There may be different results if a group is active. Usage: ```python from clumper import Clumper data = [ {\"a\": 6, \"grp\": \"a\"}, {\"a\": 2, \"grp\": \"b\"}, {\"a\": 7, \"grp\": \"a\"}, {\"a\": 9, \"grp\": \"b\"}, {\"a\": 5, \"grp\": \"a\"} ] tfm_clump = (Clumper(data) .group_by(\"grp\") .transform(s=(\"a\", \"sum\"), u=(\"a\", \"unique\"))) expected = [ {'a': 6, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 7, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 5, 'grp': 'a', 's': 18, 'u': [5, 6, 7]}, {'a': 2, 'grp': 'b', 's': 11, 'u': [9, 2]}, {'a': 9, 'grp': 'b', 's': 11, 'u': [9, 2]} ] assert tfm_clump.equals(expected) ``` \"\"\" agg_results = self . agg ( ** kwargs ) return self . left_join ( agg_results , mapping = { k : k for k in self . groups }) Does an aggregation just like .agg() however instead of reducing the rows we merge the results back with the original data. This saves a lot of compute time because effectively this prevents us from performing a join. Parameters Name Type Description Default **kwargs keyword arguments that represent the aggregation that is about to happen, see usage below. {} Warning This method is aware of groups. There may be different results if a group is active. Usage: from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected )","title":"transform()"},{"location":"api/clumper.html#clumper.clump.Clumper.ungroup","text":"Show source code in clumper/clump.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def ungroup ( self ): \"\"\" Removes all grouping from the collection. ![](../img/ungroup.png) ```python from clumper import Clumper clump = Clumper([{\"a\": 1}]).group_by(\"a\") assert clump.groups == (\"a\", ) assert clump.ungroup().groups == tuple() ``` \"\"\" self . groups = tuple () return self Removes all grouping from the collection. from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple ()","title":"ungroup()"},{"location":"api/clumper.html#clumper.clump.Clumper.unique","text":"Show source code in clumper/clump.py 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 @dict_collection_only @return_value_if_empty ( value = []) def unique ( self , col ): \"\"\" Returns a set of unique values that a key has. ![](../img/unique.png) Usage: ```python from clumper import Clumper list_of_dicts = [ {'a': 7}, {'a': 2, 'b': 7}, {'a': 3, 'b': 6}, {'a': 2, 'b': 7} ] assert Clumper(list_of_dicts).unique(\"a\") == [2, 3, 7] assert Clumper(list_of_dicts).unique(\"b\") == [6, 7] ``` \"\"\" return self . summarise_col ( \"unique\" , col ) Returns a set of unique values that a key has. Usage: from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] assert Clumper ( list_of_dicts ) . unique ( \"a\" ) == [ 2 , 3 , 7 ] assert Clumper ( list_of_dicts ) . unique ( \"b\" ) == [ 6 , 7 ]","title":"unique()"},{"location":"api/sequence.html","text":"from clumper.sequence import * \u00b6 A collection of functions to be used in mutate / map -verbs. expanding \u00b6 This stateful function can be used to expand a key into a large list containing all the seen values. Parameters Name Type Description Default key the key to apply the smoothing to None Usage: from clumper import Clumper from clumper.sequence import expanding list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = expanding ( key = 'a' )) . collect ()) impute \u00b6 This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to required strategy the strategy to apply 'prev' fallback if the strategy fails, what value to use None Usage: from clumper import Clumper from clumper.sequence import impute list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 , 'b' : 6 }, { 'a' : 5 }, ] ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'prev' ), c = lambda d : d [ 'a' ] + d [ 'b' ]) . collect ()) ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'value' , fallback = 0 )) . collect ()) rolling \u00b6 This stateful function can be used to create a moving window over a key. Parameters Name Type Description Default key the key to apply the smoothing to None window the size of the window to create 5 Usage: from clumper import Clumper from clumper.sequence import rolling list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = rolling ( window = 2 , key = 'a' )) . collect ()) row_number \u00b6 This stateful function can be used to calculate row numbers. Usage: from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ()) smoothing \u00b6 This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to None weight exponential smoothing parameter, if 1.0 then we don't listen to the past anymore 0.5 Usage: from clumper import Clumper from clumper.sequence import smoothing list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( s1 = smoothing ( key = 'a' , weight = 0.5 ), s2 = smoothing ( key = 'a' , weight = 0.9 )) . collect ())","title":"sequence"},{"location":"api/sequence.html#from-clumpersequence-import","text":"A collection of functions to be used in mutate / map -verbs.","title":"from clumper.sequence import *"},{"location":"api/sequence.html#clumper.sequence.expanding","text":"This stateful function can be used to expand a key into a large list containing all the seen values. Parameters Name Type Description Default key the key to apply the smoothing to None Usage: from clumper import Clumper from clumper.sequence import expanding list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = expanding ( key = 'a' )) . collect ())","title":"expanding"},{"location":"api/sequence.html#clumper.sequence.impute","text":"This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to required strategy the strategy to apply 'prev' fallback if the strategy fails, what value to use None Usage: from clumper import Clumper from clumper.sequence import impute list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 , 'b' : 6 }, { 'a' : 5 }, ] ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'prev' ), c = lambda d : d [ 'a' ] + d [ 'b' ]) . collect ()) ( Clumper ( list_dicts ) . mutate ( b = impute ( 'b' , strategy = 'value' , fallback = 0 )) . collect ())","title":"impute"},{"location":"api/sequence.html#clumper.sequence.rolling","text":"This stateful function can be used to create a moving window over a key. Parameters Name Type Description Default key the key to apply the smoothing to None window the size of the window to create 5 Usage: from clumper import Clumper from clumper.sequence import rolling list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = rolling ( window = 2 , key = 'a' )) . collect ())","title":"rolling"},{"location":"api/sequence.html#clumper.sequence.row_number","text":"This stateful function can be used to calculate row numbers. Usage: from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ())","title":"row_number"},{"location":"api/sequence.html#clumper.sequence.smoothing","text":"This stateful function can be used to calculate row numbers. Uses exponential smoothing. Parameters Name Type Description Default key the key to apply the smoothing to None weight exponential smoothing parameter, if 1.0 then we don't listen to the past anymore 0.5 Usage: from clumper import Clumper from clumper.sequence import smoothing list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 }, { 'a' : 4 } ] ( Clumper ( list_dicts ) . mutate ( s1 = smoothing ( key = 'a' , weight = 0.5 ), s2 = smoothing ( key = 'a' , weight = 0.9 )) . collect ())","title":"smoothing"},{"location":"guides/faq.html","text":"Usecase \u00b6 When should I use Clumper ? \u00b6 This package might solve some problems for you if: You're dealing with nested data. You're dealing with data that's not super big. You enjoy using a functional-style of exploring data. When should I not use Clumper ? \u00b6 This package might not be the best choice if: You're dealing with very large datasets. You're dealing with data that strictly Library Assumptions \u00b6 How does Clumper deal with missing data? \u00b6 If your datastructure represents a table with rows and columns then you'd usually denote missing data via something like NA or NaN . This is common in SQL but also in numeric libraries like numpy . Since this library tries to focus on json-like data-structures we also deal with it differently. If you'd be dealing with a csv, you'd consider this example to contain missing data. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 , \"a\" : None }, { \"r\" : 3 , \"a\" : 2.5 } ] Instead, this is how Clumper would represent it. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 }, { \"r\" : 3 , \"a\" : 2.5 } ] In this case we have an item where the key \"a\" is acutally missing. In the previous example we definately had a key but the value was equal to None . Am I limited to dictionaries? \u00b6 Although this library has lists of dictionaries in mind, we actually don't force this on you. We just assume a sequence as input. From here it's your responsibility to come up with reasonable lambda functions for the verbs that follow. Most verbs are flexible enough that they don't assume the lambda functions to act on dictionaries. For example. If you look at this code: .sort(lambda d: d) Then you can infer that we're sorting based on whatever the value in our collection is. It would work on a list of integers, floats or characters. If you'd instead have: .sort(lambda d: d[0]) Then it wouldn't work anymore if d is a integer, float or string but it would work if d is a list, tuple or a dictionary with a key of 0 available. Integer Example \u00b6 Here we take the top 50 numbers from a list and then sort. from clumper import Clumper ( Clumper ( range ( 100 )) . head ( 50 ) . sort ( lambda d : d , reverse = True )) Neither .head() nor .sort() makes an assumption of the conents of the Clumper collection. Pay attention though that the lambda function inside of .sort() is appropriate for the data in the collection. Character Example \u00b6 Here we start out with a sequence of letters and we turn it into a collection of dictionaries. from clumper import Clumper ( Clumper ( 'abcedfghijklmnopqrstuvwxyz' ) . map ( lambda c : { 'char' : c , 'ord' : ord ( c )})) Verbs that need Dictionaries \u00b6 There's a short list of verbs that carry some restrictions The .select() verb needs to select keys so the sequences must contain dictionaries The .drop() verb needs to remove keys so the sequences must contain dictionaries The .agg()/.transform() verbs need a collection of dictionaries to construct aggregations. If you really need this feature for non-dictionary sequences consider the .reduce() method. The .mutate() verb is really flexible in terms of input that it accepts but it will always produce a dictionary as output. If you really need a non-dictionary output, consider the map() method.","title":"FAQ"},{"location":"guides/faq.html#usecase","text":"","title":"Usecase"},{"location":"guides/faq.html#when-should-i-use-clumper","text":"This package might solve some problems for you if: You're dealing with nested data. You're dealing with data that's not super big. You enjoy using a functional-style of exploring data.","title":"When should I use Clumper?"},{"location":"guides/faq.html#when-should-i-not-use-clumper","text":"This package might not be the best choice if: You're dealing with very large datasets. You're dealing with data that strictly","title":"When should I not use Clumper?"},{"location":"guides/faq.html#library-assumptions","text":"","title":"Library Assumptions"},{"location":"guides/faq.html#how-does-clumper-deal-with-missing-data","text":"If your datastructure represents a table with rows and columns then you'd usually denote missing data via something like NA or NaN . This is common in SQL but also in numeric libraries like numpy . Since this library tries to focus on json-like data-structures we also deal with it differently. If you'd be dealing with a csv, you'd consider this example to contain missing data. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 , \"a\" : None }, { \"r\" : 3 , \"a\" : 2.5 } ] Instead, this is how Clumper would represent it. list_of_data = [ { \"r\" : 1 , \"a\" : 1.5 }, { \"r\" : 2 }, { \"r\" : 3 , \"a\" : 2.5 } ] In this case we have an item where the key \"a\" is acutally missing. In the previous example we definately had a key but the value was equal to None .","title":"How does Clumper deal with missing data?"},{"location":"guides/faq.html#am-i-limited-to-dictionaries","text":"Although this library has lists of dictionaries in mind, we actually don't force this on you. We just assume a sequence as input. From here it's your responsibility to come up with reasonable lambda functions for the verbs that follow. Most verbs are flexible enough that they don't assume the lambda functions to act on dictionaries. For example. If you look at this code: .sort(lambda d: d) Then you can infer that we're sorting based on whatever the value in our collection is. It would work on a list of integers, floats or characters. If you'd instead have: .sort(lambda d: d[0]) Then it wouldn't work anymore if d is a integer, float or string but it would work if d is a list, tuple or a dictionary with a key of 0 available.","title":"Am I limited to dictionaries?"},{"location":"guides/faq.html#integer-example","text":"Here we take the top 50 numbers from a list and then sort. from clumper import Clumper ( Clumper ( range ( 100 )) . head ( 50 ) . sort ( lambda d : d , reverse = True )) Neither .head() nor .sort() makes an assumption of the conents of the Clumper collection. Pay attention though that the lambda function inside of .sort() is appropriate for the data in the collection.","title":"Integer Example"},{"location":"guides/faq.html#character-example","text":"Here we start out with a sequence of letters and we turn it into a collection of dictionaries. from clumper import Clumper ( Clumper ( 'abcedfghijklmnopqrstuvwxyz' ) . map ( lambda c : { 'char' : c , 'ord' : ord ( c )}))","title":"Character Example"},{"location":"guides/faq.html#verbs-that-need-dictionaries","text":"There's a short list of verbs that carry some restrictions The .select() verb needs to select keys so the sequences must contain dictionaries The .drop() verb needs to remove keys so the sequences must contain dictionaries The .agg()/.transform() verbs need a collection of dictionaries to construct aggregations. If you really need this feature for non-dictionary sequences consider the .reduce() method. The .mutate() verb is really flexible in terms of input that it accepts but it will always produce a dictionary as output. If you really need a non-dictionary output, consider the map() method.","title":"Verbs that need Dictionaries"},{"location":"guides/getting-started.html","text":"Getting Started \u00b6 This library offers tools to deal with nested json data structure. To demonstrate how it might work we'll download a dataset locally. It's a list of dictionaries that contains information about pokemon. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib . request . urlopen ( url ) as f : pokemon = json . loads ( f . read ()) Here's the first two examples from this list; [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}] There's about 800 dictionaries in our list. This is big enough to not want to go through manually but also small enough that we don't need to worry too much about performance. Example \u00b6 Let's run a basic example. from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) This is the result of this query. [{'name': 'Diglett', 'type': 'Ground', 'ratio': 5.5}, {'name': 'DeoxysAttack Forme', 'type': 'Psychic', 'ratio': 3.6}, {'name': 'Krabby', 'type': 'Water', 'ratio': 3.5}, {'name': 'DeoxysNormal Forme', 'type': 'Psychic', 'ratio': 3.0}, {'name': 'BanetteMega Banette', 'type': 'Ghost', 'ratio': 2.578125}] Here's what the code did. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper collection. It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. These dictionaries will also get a property called ratio which is the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries. Design \u00b6 The idea behind the library is that the API is like the English language. We could say that the dataset is like a noun and that each method is like a verb . Each verb will tell the API what will needs to happen to the data and the input to the verb will tell you how how this will happen. For example, the .keep() method will filter out data and how it will filter data is explained by the lambda function that we pass in. The idea is that most analyses that you'd be interested in doing can be constructed using just these verbs. You can see a detailed view of how to use all the verbs in the api description . We did not come up with this way of thinking about data analysis. In fact, this library is heavily inspired by the dplyr library in R . What are Verbs? \u00b6 In this library verbs are special kinds of methods. They really are just methods in essense but they imply a general pattern. In Clumper , a verb is a method that; Always returns a Clumper back, so it's chain-able. Has a name that tells you what is happening to the data while the parameters tell you how it is changing the data. This combination of properties allows you to write code in the same way you'd explain the steps to a human. Take this code for example. from clumper import Clumper list_of_dicts = [ { 'a' : 7 , 'b' : 2 }, { 'a' : 2 , 'b' : 4 }, { 'a' : 3 , 'b' : 6 } ] ( Clumper ( list_of_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ]) . sort ( lambda d : d [ 'c' ])) Schematically, this is what the code does. Step 1 \u00b6 First we use the mutate verb. This allows us to add values to pairs in our collection. The output of this step is another Clumper collection. Step 2 \u00b6 Next we pick up the mutated collection and we apply a sort to it. Again, the output of this another Clumper . This means that we can keep adding steps as we further our analysis. Method Chaining \u00b6 This style of programming is really powerful and it keeps you productive once you've gotten a hang of the lambda functions. The lambda functions that you pass in can be general python. This also means that you're free to use nested dictionaries, sets or whatever you like doing in python.","title":"Getting Started"},{"location":"guides/getting-started.html#getting-started","text":"This library offers tools to deal with nested json data structure. To demonstrate how it might work we'll download a dataset locally. It's a list of dictionaries that contains information about pokemon. import json import urllib.request url = 'http://calmcode.io/datasets/pokemon.json' with urllib . request . urlopen ( url ) as f : pokemon = json . loads ( f . read ()) Here's the first two examples from this list; [{'name': 'Bulbasaur', 'type': ['Grass', 'Poison'], 'total': 318, 'hp': 45, 'attack': 49}, {'name': 'Ivysaur', 'type': ['Grass', 'Poison'], 'total': 405, 'hp': 60, 'attack': 62}] There's about 800 dictionaries in our list. This is big enough to not want to go through manually but also small enough that we don't need to worry too much about performance.","title":"Getting Started"},{"location":"guides/getting-started.html#example","text":"Let's run a basic example. from clumper import Clumper ( Clumper ( pokemon ) . keep ( lambda d : len ( d [ 'type' ]) == 1 ) . mutate ( type = lambda d : d [ 'type' ][ 0 ], ratio = lambda d : d [ 'attack' ] / d [ 'hp' ]) . select ( 'name' , 'type' , 'ratio' ) . sort ( lambda d : d [ 'ratio' ], reverse = True ) . head ( 5 ) . collect ()) This is the result of this query. [{'name': 'Diglett', 'type': 'Ground', 'ratio': 5.5}, {'name': 'DeoxysAttack Forme', 'type': 'Psychic', 'ratio': 3.6}, {'name': 'Krabby', 'type': 'Water', 'ratio': 3.5}, {'name': 'DeoxysNormal Forme', 'type': 'Psychic', 'ratio': 3.0}, {'name': 'BanetteMega Banette', 'type': 'Ghost', 'ratio': 2.578125}] Here's what the code did. It imports Clumper . It turns the list of pokemon dictionaries into a Clumper collection. It removes all the pokemon that have more than 1 type. The dictionaries that are left will have their type now as a string instead of a list of strings. These dictionaries will also get a property called ratio which is the ratio between hp and attack . All the keys besides name , type and ratio are removed. The collection is sorted by ratio , from high to low. We grab the top 5 after sorting. The results are returned as a list of dictionaries.","title":"Example"},{"location":"guides/getting-started.html#design","text":"The idea behind the library is that the API is like the English language. We could say that the dataset is like a noun and that each method is like a verb . Each verb will tell the API what will needs to happen to the data and the input to the verb will tell you how how this will happen. For example, the .keep() method will filter out data and how it will filter data is explained by the lambda function that we pass in. The idea is that most analyses that you'd be interested in doing can be constructed using just these verbs. You can see a detailed view of how to use all the verbs in the api description . We did not come up with this way of thinking about data analysis. In fact, this library is heavily inspired by the dplyr library in R .","title":"Design"},{"location":"guides/getting-started.html#what-are-verbs","text":"In this library verbs are special kinds of methods. They really are just methods in essense but they imply a general pattern. In Clumper , a verb is a method that; Always returns a Clumper back, so it's chain-able. Has a name that tells you what is happening to the data while the parameters tell you how it is changing the data. This combination of properties allows you to write code in the same way you'd explain the steps to a human. Take this code for example. from clumper import Clumper list_of_dicts = [ { 'a' : 7 , 'b' : 2 }, { 'a' : 2 , 'b' : 4 }, { 'a' : 3 , 'b' : 6 } ] ( Clumper ( list_of_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ]) . sort ( lambda d : d [ 'c' ])) Schematically, this is what the code does.","title":"What are Verbs?"},{"location":"guides/getting-started.html#step-1","text":"First we use the mutate verb. This allows us to add values to pairs in our collection. The output of this step is another Clumper collection.","title":"Step 1"},{"location":"guides/getting-started.html#step-2","text":"Next we pick up the mutated collection and we apply a sort to it. Again, the output of this another Clumper . This means that we can keep adding steps as we further our analysis.","title":"Step 2"},{"location":"guides/getting-started.html#method-chaining","text":"This style of programming is really powerful and it keeps you productive once you've gotten a hang of the lambda functions. The lambda functions that you pass in can be general python. This also means that you're free to use nested dictionaries, sets or whatever you like doing in python.","title":"Method Chaining"},{"location":"guides/summary-methods.html","text":"The Clumper object also offers useful methods that aren't verbs. Summary Methods \u00b6 Here's a sample of useful methods to get summaries from your collection. Each of these methods has a string equivalent that is used in .agg() when making aggregations. We'll list a few common ones here but take note: all of these are methods ignore the grouping . If you want to use these methods with grouping, use .agg() instead. .mean() \u00b6 You can calculate the mean of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . mean ( \"a\" ) Clumper ( list_of_dicts ) . mean ( \"b\" ) .count() \u00b6 You can count the number of rows for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . count ( \"a\" ) Clumper ( list_of_dicts ) . count ( \"b\" ) .unique() \u00b6 You can retreive all unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . unique ( \"a\" ) Clumper ( list_of_dicts ) . unique ( \"b\" ) .n_unique() \u00b6 You can the number of unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . n_unique ( \"a\" ) Clumper ( list_of_dicts ) . n_unique ( \"b\" ) .sum() \u00b6 You can calculate the sum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" ) .min() \u00b6 You can calculate the minimum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . min ( \"a\" ) Clumper ( list_of_dicts ) . min ( \"b\" ) .max() \u00b6 You can calculate the maximum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . max ( \"a\" ) Clumper ( list_of_dicts ) . max ( \"b\" ) More? \u00b6 If you'd like to see more information these methods check the API of the Clumper object. That's where you'll find them.","title":"Useful Methods"},{"location":"guides/summary-methods.html#summary-methods","text":"Here's a sample of useful methods to get summaries from your collection. Each of these methods has a string equivalent that is used in .agg() when making aggregations. We'll list a few common ones here but take note: all of these are methods ignore the grouping . If you want to use these methods with grouping, use .agg() instead.","title":"Summary Methods"},{"location":"guides/summary-methods.html#mean","text":"You can calculate the mean of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . mean ( \"a\" ) Clumper ( list_of_dicts ) . mean ( \"b\" )","title":".mean()"},{"location":"guides/summary-methods.html#count","text":"You can count the number of rows for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . count ( \"a\" ) Clumper ( list_of_dicts ) . count ( \"b\" )","title":".count()"},{"location":"guides/summary-methods.html#unique","text":"You can retreive all unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . unique ( \"a\" ) Clumper ( list_of_dicts ) . unique ( \"b\" )","title":".unique()"},{"location":"guides/summary-methods.html#n_unique","text":"You can the number of unique values for a certain key. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . n_unique ( \"a\" ) Clumper ( list_of_dicts ) . n_unique ( \"b\" )","title":".n_unique()"},{"location":"guides/summary-methods.html#sum","text":"You can calculate the sum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . sum ( \"a\" ) Clumper ( list_of_dicts ) . sum ( \"b\" )","title":".sum()"},{"location":"guides/summary-methods.html#min","text":"You can calculate the minimum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . min ( \"a\" ) Clumper ( list_of_dicts ) . min ( \"b\" )","title":".min()"},{"location":"guides/summary-methods.html#max","text":"You can calculate the maximum of values for which a key exists. from clumper import Clumper list_of_dicts = [ { 'a' : 7 }, { 'a' : 2 , 'b' : 7 }, { 'a' : 3 , 'b' : 6 }, { 'a' : 2 , 'b' : 7 } ] Clumper ( list_of_dicts ) . max ( \"a\" ) Clumper ( list_of_dicts ) . max ( \"b\" )","title":".max()"},{"location":"guides/summary-methods.html#more","text":"If you'd like to see more information these methods check the API of the Clumper object. That's where you'll find them.","title":"More?"},{"location":"guides/understanding-groups.html","text":"If a group is present on a Clumper then the behavior of some of the verbs will change. This guide will explain what changes you can expect and why they are useful. What is a Group? \u00b6 You can add a group to a Clumper by calling .group_by() . from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' )) The current group is now looking at all the items that have grp as a key. This means that the collection is now aware that you're interested in calculating things per group. In this case you'd get two groups. One for {'grp': 'a'} and one for {'grp': 'b'} . There are some verbs that will behave differently because of this. Agg \u00b6 Without Groups \u00b6 When you don't have a group active then we'll make a single summary for the entire collection of items. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ()) With Groups \u00b6 When there is a group active then we'll make a summary per group. We'll also ensure that the keys of the relevant groups are made available in the new collection. Note that the group is still active! from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ()) Transform \u00b6 The .transform() verb is similar to the .agg() verb. The main difference is that it does not reduce any rows/keys during aggregation. Instead they are merged back in with the original collection. The examples below should help explain what the usecase is. Without Groups \u00b6 With no groups active we just attach the same summary to every item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ()) With Groups \u00b6 With groups active we calculate a summary per group and only attach the relevant summary to each item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ()) Mutate \u00b6 This library offers stateful functions like row_number . If you use these functions while there is a group active you'll notice different behavior. Without Groups \u00b6 When there is no group we just start counting at one and we continue counting until we're at the end of the collection. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ()) With Groups \u00b6 Because there are groups you'll notice that the order is different but also that the row_number resets when seeing the new group. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . mutate ( r = row_number ()) . collect ()) Sort \u00b6 Without Groups \u00b6 With no groups active, we just sort the entire collection based on the key that is provided. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . sort ( key = lambda d : d [ 'a' ]) . collect ()) With Groups \u00b6 With groups active, still perform the sorting but only within each group. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . sort ( key = lambda d : d [ 'a' ]) . collect ()) Ungroup \u00b6 If you're done with a group and you'd like to move on you can drop all groups by calling .ungroup() .","title":"About Groups"},{"location":"guides/understanding-groups.html#what-is-a-group","text":"You can add a group to a Clumper by calling .group_by() . from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' )) The current group is now looking at all the items that have grp as a key. This means that the collection is now aware that you're interested in calculating things per group. In this case you'd get two groups. One for {'grp': 'a'} and one for {'grp': 'b'} . There are some verbs that will behave differently because of this.","title":"What is a Group?"},{"location":"guides/understanding-groups.html#agg","text":"","title":"Agg"},{"location":"guides/understanding-groups.html#without-groups","text":"When you don't have a group active then we'll make a single summary for the entire collection of items. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups","text":"When there is a group active then we'll make a summary per group. We'll also ensure that the keys of the relevant groups are made available in the new collection. Note that the group is still active! from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . agg ( s = ( 'a' , 'sum' ), m = ( 'a' , 'mean' )) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#transform","text":"The .transform() verb is similar to the .agg() verb. The main difference is that it does not reduce any rows/keys during aggregation. Instead they are merged back in with the original collection. The examples below should help explain what the usecase is.","title":"Transform"},{"location":"guides/understanding-groups.html#without-groups_1","text":"With no groups active we just attach the same summary to every item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups_1","text":"With groups active we calculate a summary per group and only attach the relevant summary to each item. from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_data = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , \"sum\" ), u = ( \"a\" , \"unique\" )) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#mutate","text":"This library offers stateful functions like row_number . If you use these functions while there is a group active you'll notice different behavior.","title":"Mutate"},{"location":"guides/understanding-groups.html#without-groups_2","text":"When there is no group we just start counting at one and we continue counting until we're at the end of the collection. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . mutate ( r = row_number ()) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups_2","text":"Because there are groups you'll notice that the order is different but also that the row_number resets when seeing the new group. from clumper import Clumper from clumper.sequence import row_number list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 4 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . mutate ( r = row_number ()) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#sort","text":"","title":"Sort"},{"location":"guides/understanding-groups.html#without-groups_3","text":"With no groups active, we just sort the entire collection based on the key that is provided. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . sort ( key = lambda d : d [ 'a' ]) . collect ())","title":"Without Groups"},{"location":"guides/understanding-groups.html#with-groups_3","text":"With groups active, still perform the sorting but only within each group. from clumper import Clumper list_dicts = [ { 'a' : 6 , 'grp' : 'a' }, { 'a' : 2 , 'grp' : 'b' }, { 'a' : 7 , 'grp' : 'a' }, { 'a' : 9 , 'grp' : 'b' }, { 'a' : 5 , 'grp' : 'a' } ] ( Clumper ( list_dicts ) . group_by ( 'grp' ) . sort ( key = lambda d : d [ 'a' ]) . collect ())","title":"With Groups"},{"location":"guides/understanding-groups.html#ungroup","text":"If you're done with a group and you'd like to move on you can drop all groups by calling .ungroup() .","title":"Ungroup"},{"location":"guides/understanding-joins.html","text":"Sometimes you'd like to merge two collections into one. There's a few ways of doing that in this library. Concat \u00b6 If you just want to stack collections on top of eachother, you can use concat for that. It's short for \"concatenate\". from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3 Joins \u00b6 If you want to merge two collections together based on the values then you'd be interested in a join . When doing a join there are two sets: a leftset and a right set. Depending on the type of join that you are performing you will get different behavior. Left Join \u00b6 A left join keeps all the values from the left table even when there's nothing from the right table that it can join on. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected ) Note that items on the left hand side may appear multiple times. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, { \"c\" : 9 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { 'a' : 1 , 'b' : 4 , 'c' : 9 }, { 'a' : 2 , 'b' : 6 , 'c' : 7 }, { 'a' : 2 , 'b' : 6 , 'c' : 9 }, { 'a' : 3 , 'b' : 8 } ] assert result . equals ( expected ) Right Join \u00b6 This is not implemented. You can swap the left/right tables and still use the left-join for this. Inner Join \u00b6 An inner join only keeps items that can be paired in both tables. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected )","title":"Merge Verbs"},{"location":"guides/understanding-joins.html#concat","text":"If you just want to stack collections on top of eachother, you can use concat for that. It's short for \"concatenate\". from clumper import Clumper c1 = Clumper ([{ \"a\" : 1 }]) c2 = Clumper ([{ \"a\" : 2 }]) c3 = Clumper ([{ \"a\" : 3 }]) assert len ( c1 . concat ( c2 )) == 2 assert len ( c1 . concat ( c2 , c3 )) == 3 assert len ( c1 . concat ( c2 ) . concat ( c3 )) == 3","title":"Concat"},{"location":"guides/understanding-joins.html#joins","text":"If you want to merge two collections together based on the values then you'd be interested in a join . When doing a join there are two sets: a leftset and a right set. Depending on the type of join that you are performing you will get different behavior.","title":"Joins"},{"location":"guides/understanding-joins.html#left-join","text":"A left join keeps all the values from the left table even when there's nothing from the right table that it can join on. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, { \"a\" : 3 , \"b\" : 8 }, ] assert result . equals ( expected ) Note that items on the left hand side may appear multiple times. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, { \"c\" : 9 , \"b\" : 6 }, ]) result = left . left_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { 'a' : 1 , 'b' : 4 , 'c' : 9 }, { 'a' : 2 , 'b' : 6 , 'c' : 7 }, { 'a' : 2 , 'b' : 6 , 'c' : 9 }, { 'a' : 3 , 'b' : 8 } ] assert result . equals ( expected )","title":"Left Join"},{"location":"guides/understanding-joins.html#right-join","text":"This is not implemented. You can swap the left/right tables and still use the left-join for this.","title":"Right Join"},{"location":"guides/understanding-joins.html#inner-join","text":"An inner join only keeps items that can be paired in both tables. from clumper import Clumper left = Clumper ([ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 6 }, { \"a\" : 3 , \"b\" : 8 }, ]) right = Clumper ([ { \"c\" : 9 , \"b\" : 4 }, { \"c\" : 8 , \"b\" : 5 }, { \"c\" : 7 , \"b\" : 6 }, ]) result = left . inner_join ( right , mapping = { \"b\" : \"b\" }) expected = [ { \"a\" : 1 , \"b\" : 4 , \"c\" : 9 }, { \"a\" : 2 , \"b\" : 6 , \"c\" : 7 }, ] assert result . equals ( expected )","title":"Inner Join"},{"location":"guides/understanding-reshaping.html","text":"Because sequences of nested data really come in all sorts of shapes and sizes this library offers verbs to help you reshape the data into different formats. This document will demonstrate how these verbs work. Explode \u00b6 Sometimes you'll have data that is nested as a list of values. If you'd like to expand such a list of values you can use .explode() . from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) assert clumper . equals ([{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }]) new_data = Clumper ( data ) . explode ( item = \"items\" ) . collect () assert clumper . equals ([{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }]) Note how the syntax allows you to either explode the values assigning they to the old keyname or to directly rename this field. You can also pass multiple keys in a single command. from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ], 'values' :[ 3 , 4 ]}] clumper = Clumper ( data ) . explode ( \"items\" , \"values\" ) expected = [ { 'a' : 1 , 'items' : 1 , 'values' : 3 }, { 'a' : 1 , 'items' : 1 , 'values' : 4 }, { 'a' : 1 , 'items' : 2 , 'values' : 3 }, { 'a' : 1 , 'items' : 2 , 'values' : 4 } ] assert clumper . equals ( expected ) new_data = Clumper ( data ) . explode ( item = \"items\" , val = \"values\" ) . collect () expected = [ { 'a' : 1 , 'item' : 1 , 'val' : 3 }, { 'a' : 1 , 'item' : 1 , 'val' : 4 }, { 'a' : 1 , 'item' : 2 , 'val' : 3 }, { 'a' : 1 , 'item' : 2 , 'val' : 4 } ] assert clumper . equals ( expected )","title":"Reshaping Verbs"},{"location":"guides/understanding-reshaping.html#explode","text":"Sometimes you'll have data that is nested as a list of values. If you'd like to expand such a list of values you can use .explode() . from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ]}] clumper = Clumper ( data ) . explode ( \"items\" ) assert clumper . equals ([{ 'a' : 1 , 'items' : 1 }, { 'a' : 1 , 'items' : 2 }]) new_data = Clumper ( data ) . explode ( item = \"items\" ) . collect () assert clumper . equals ([{ 'a' : 1 , 'item' : 1 }, { 'a' : 1 , 'item' : 2 }]) Note how the syntax allows you to either explode the values assigning they to the old keyname or to directly rename this field. You can also pass multiple keys in a single command. from clumper import Clumper data = [{ 'a' : 1 , 'items' : [ 1 , 2 ], 'values' :[ 3 , 4 ]}] clumper = Clumper ( data ) . explode ( \"items\" , \"values\" ) expected = [ { 'a' : 1 , 'items' : 1 , 'values' : 3 }, { 'a' : 1 , 'items' : 1 , 'values' : 4 }, { 'a' : 1 , 'items' : 2 , 'values' : 3 }, { 'a' : 1 , 'items' : 2 , 'values' : 4 } ] assert clumper . equals ( expected ) new_data = Clumper ( data ) . explode ( item = \"items\" , val = \"values\" ) . collect () expected = [ { 'a' : 1 , 'item' : 1 , 'val' : 3 }, { 'a' : 1 , 'item' : 1 , 'val' : 4 }, { 'a' : 1 , 'item' : 2 , 'val' : 3 }, { 'a' : 1 , 'item' : 2 , 'val' : 4 } ] assert clumper . equals ( expected )","title":"Explode"},{"location":"guides/useful-verbs.html","text":"There's a few extra verbs and use-cases of verbs that are worth highlighting. Duplicates \u00b6 Removing duplicates is tricky via .keep() so instead we've created a method for this usecase. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected )","title":"More Verbs"},{"location":"guides/useful-verbs.html#duplicates","text":"Removing duplicates is tricky via .keep() so instead we've created a method for this usecase. from clumper import Clumper data = [{ \"a\" : 1 }, { \"a\" : 2 }, { \"a\" : 2 }] clump = Clumper ( data ) . drop_duplicates () expected = [{ \"a\" : 1 }, { \"a\" : 2 }] assert clump . equals ( expected )","title":"Duplicates"},{"location":"guides/verbs.html","text":"Here's a list of the common verbs that you'll most likely use the most. Keep \u00b6 The keep verb allows you to grab a subset from the original collection. Base Example \u00b6 Here's a basic example of what keep and do. from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected ) Dropping Missing Values \u00b6 Libraries like pandas offer verbs like .dropna() . This library does not because we handle missing values different. If you've got a collection with a missing value then you can simply remove it via .keep() though. from clumper import Clumper data = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, { \"a\" : 4 }, ] clump = Clumper ( data ) . keep ( lambda d : 'b' in d . keys ()) expected = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, ] assert clump . equals ( expected ) Mutate \u00b6 The mutate verb allows you to add/overwrite data to each item in the collection. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected ) Sort \u00b6 The sort verb allows you to sort the collection based on values of items. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ()) Select \u00b6 The select verb allows you to select a subset of keys for each item. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ]) Drop \u00b6 The select verb allows you to remove a subset of keys for each item. Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ]) Group By \u00b6 The group_by verb allows you to set a group on a collection based on the values of the keys that you pass. The groups represent subsets and certain verbs will change their behavior if there are groups present. The main use-case for this verb is in combination with .agg() . Base Example \u00b6 from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) Ungroup \u00b6 The ungroup verb will remove any groups currently present. Base Example \u00b6 from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple () Agg \u00b6 The agg verb is short for aggregate. They allow you to summarise the data, keeping in mind any groups that are on it. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min and max . For more information on how they work you can read more info here . Base Example \u00b6 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ()) Functional Uses \u00b6 You can also pass your own aggregating functions to .agg() . from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : len ( set ( x ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected ) The results are exactly the same, but being able to pass in a function there might give extra flexibility. Collect \u00b6 When you're done with your data-wrangling you may want to get a basic python list back. That's what .collect() will do for you.","title":"Common Verbs"},{"location":"guides/verbs.html#keep","text":"The keep verb allows you to grab a subset from the original collection.","title":"Keep"},{"location":"guides/verbs.html#base-example","text":"Here's a basic example of what keep and do. from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected )","title":"Base Example"},{"location":"guides/verbs.html#dropping-missing-values","text":"Libraries like pandas offer verbs like .dropna() . This library does not because we handle missing values different. If you've got a collection with a missing value then you can simply remove it via .keep() though. from clumper import Clumper data = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, { \"a\" : 4 }, ] clump = Clumper ( data ) . keep ( lambda d : 'b' in d . keys ()) expected = [ { \"a\" : 1 , \"b\" : 4 }, { \"a\" : 2 , \"b\" : 3 }, { \"a\" : 3 , \"b\" : 2 }, ] assert clump . equals ( expected )","title":"Dropping Missing Values"},{"location":"guides/verbs.html#mutate","text":"The mutate verb allows you to add/overwrite data to each item in the collection.","title":"Mutate"},{"location":"guides/verbs.html#base-example_1","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] result = ( Clumper ( list_dicts ) . mutate ( c = lambda d : d [ 'a' ] + d [ 'b' ], s = lambda d : d [ 'a' ] + d [ 'b' ] + d [ 'c' ])) expected = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 's' : 6 }, { 'a' : 2 , 'b' : 3 , 'c' : 5 , 's' : 10 }, { 'a' : 1 , 'b' : 6 , 'c' : 7 , 's' : 14 } ] assert result . equals ( expected )","title":"Base Example"},{"location":"guides/verbs.html#sort","text":"The sort verb allows you to sort the collection based on values of items.","title":"Sort"},{"location":"guides/verbs.html#base-example_2","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 3 }, { 'a' : 2 , 'b' : 1 }] ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'a' ]) . collect ()) ( Clumper ( list_dicts ) . sort ( lambda d : d [ 'b' ], reverse = True ) . collect ())","title":"Base Example"},{"location":"guides/verbs.html#select","text":"The select verb allows you to select a subset of keys for each item.","title":"Select"},{"location":"guides/verbs.html#base-example_3","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"Base Example"},{"location":"guides/verbs.html#drop","text":"The select verb allows you to remove a subset of keys for each item.","title":"Drop"},{"location":"guides/verbs.html#base-example_4","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . drop ( 'c' ) assert all ([ \"c\" not in d . keys () for d in clump ])","title":"Base Example"},{"location":"guides/verbs.html#group-by","text":"The group_by verb allows you to set a group on a collection based on the values of the keys that you pass. The groups represent subsets and certain verbs will change their behavior if there are groups present. The main use-case for this verb is in combination with .agg() .","title":"Group By"},{"location":"guides/verbs.html#base-example_5","text":"from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , )","title":"Base Example"},{"location":"guides/verbs.html#ungroup","text":"The ungroup verb will remove any groups currently present.","title":"Ungroup"},{"location":"guides/verbs.html#base-example_6","text":"from clumper import Clumper clump = Clumper ([{ \"a\" : 1 }]) . group_by ( \"a\" ) assert clump . groups == ( \"a\" , ) assert clump . ungroup () . groups == tuple ()","title":"Base Example"},{"location":"guides/verbs.html#agg","text":"The agg verb is short for aggregate. They allow you to summarise the data, keeping in mind any groups that are on it. When defining a summary to apply you'll need to pass three things: the name of the new key the key you'd like to summarise (first item in the tuple) the summary you'd like to calculate on that key (second item in the tuple) The following aggregation functions are available: mean , count , unique , n_unique , sum , min and max . For more information on how they work you can read more info here .","title":"Agg"},{"location":"guides/verbs.html#base-example_7","text":"from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 }, { 'a' : 3 } ] ( Clumper ( list_dicts ) . agg ( mean_a = ( 'a' , 'mean' ), min_b = ( 'b' , 'min' ), max_b = ( 'b' , 'max' )) . collect ()) another_list_dicts = [ { 'a' : 1 , 'c' : 'a' }, { 'a' : 2 , 'c' : 'b' }, { 'a' : 3 , 'c' : 'a' } ] ( Clumper ( another_list_dicts ) . group_by ( 'c' ) . agg ( mean_a = ( 'a' , 'mean' ), uniq_a = ( 'a' , 'unique' )) . collect ())","title":"Base Example"},{"location":"guides/verbs.html#functional-uses","text":"You can also pass your own aggregating functions to .agg() . from clumper import Clumper data = [ { \"a\" : 6 , \"grp\" : \"a\" }, { \"a\" : 2 , \"grp\" : \"b\" }, { \"a\" : 7 , \"grp\" : \"a\" }, { \"a\" : 9 , \"grp\" : \"b\" }, { \"a\" : 5 , \"grp\" : \"a\" } ] tfm_clump = ( Clumper ( data ) . group_by ( \"grp\" ) . transform ( s = ( \"a\" , sum ), u = ( \"a\" , lambda x : len ( set ( x ))) expected = [ { 'a' : 6 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 7 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 5 , 'grp' : 'a' , 's' : 18 , 'u' : [ 5 , 6 , 7 ]}, { 'a' : 2 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]}, { 'a' : 9 , 'grp' : 'b' , 's' : 11 , 'u' : [ 9 , 2 ]} ] assert tfm_clump . equals ( expected ) The results are exactly the same, but being able to pass in a function there might give extra flexibility.","title":"Functional Uses"},{"location":"guides/verbs.html#collect","text":"When you're done with your data-wrangling you may want to get a basic python list back. That's what .collect() will do for you.","title":"Collect"}]}